   1               		.file	"logger.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.file 0 "/home/files/osdev/platform/avr" "logger/logger.c"
  12               	_lcd_log:
  13               	.LVL0:
  14               	.LFB4:
  15               		.file 1 "logger/logger.c"
   1:logger/logger.c **** /**
   2:logger/logger.c ****  * @file    logger.c
   3:logger/logger.c ****  * @author  Tim Gabrikowski, Anton Tchekov
   4:logger/logger.c ****  * @version 0.1
   5:logger/logger.c ****  * @date    16.05.2023
   6:logger/logger.c ****  */
   7:logger/logger.c **** 
   8:logger/logger.c **** #include <logger.h>
   9:logger/logger.c **** #include <serial.h>
  10:logger/logger.c **** #include <lcd.h>
  11:logger/logger.c **** #include <avr/pgmspace.h>
  12:logger/logger.c **** #include <avr/interrupt.h>
  13:logger/logger.c **** #include <stdarg.h>
  14:logger/logger.c **** #include <stdio.h>
  15:logger/logger.c **** #include <ctype.h>
  16:logger/logger.c **** 
  17:logger/logger.c **** #define MEMORY_DUMP_WIDTH   16
  18:logger/logger.c **** 
  19:logger/logger.c **** #define LOG_Y_OFFSET       120
  20:logger/logger.c **** #define LOG_X_OFFSET        10
  21:logger/logger.c **** #define LOG_Y_ADVANCE       10
  22:logger/logger.c **** #define LOG_X_TEXT_OFFSET   49
  23:logger/logger.c **** #define LOG_START_WIDTH      8
  24:logger/logger.c **** 
  25:logger/logger.c **** const RGB565 _log_color[] PROGMEM =
  26:logger/logger.c **** {
  27:logger/logger.c **** 	COLOR_CYAN,
  28:logger/logger.c **** 	COLOR_GREEN,
  29:logger/logger.c **** 	COLOR_YELLOW,
  30:logger/logger.c **** 	COLOR_RED,
  31:logger/logger.c **** 	COLOR_MAGENTA
  32:logger/logger.c **** };
  33:logger/logger.c **** 
  34:logger/logger.c **** const char _init[] PROGMEM = "INIT";
  35:logger/logger.c **** const char _debug[] PROGMEM = "DEBUG";
  36:logger/logger.c **** const char _warn[] PROGMEM = "WARN";
  37:logger/logger.c **** const char _error[] PROGMEM = "ERROR";
  38:logger/logger.c **** const char _panic[] PROGMEM = "PANIC";
  39:logger/logger.c **** 
  40:logger/logger.c **** const char *const _log_msg[] PROGMEM =
  41:logger/logger.c **** {
  42:logger/logger.c **** 	_init,
  43:logger/logger.c **** 	_debug,
  44:logger/logger.c **** 	_warn,
  45:logger/logger.c **** 	_error,
  46:logger/logger.c **** 	_panic
  47:logger/logger.c **** };
  48:logger/logger.c **** 
  49:logger/logger.c **** static u16 _log_y = LOG_Y_OFFSET;
  50:logger/logger.c **** 
  51:logger/logger.c **** static void _lcd_log(LogLevel level, const char *msg)
  52:logger/logger.c **** {
  16               		.loc 1 52 1 view -0
  17               		.cfi_startproc
  18               		.loc 1 52 1 is_stmt 0 view .LVU1
  19 0000 AF92      		push r10
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 11, -3
  25 0004 CF92      		push r12
  26               		.cfi_def_cfa_offset 5
  27               		.cfi_offset 12, -4
  28 0006 DF92      		push r13
  29               		.cfi_def_cfa_offset 6
  30               		.cfi_offset 13, -5
  31 0008 EF92      		push r14
  32               		.cfi_def_cfa_offset 7
  33               		.cfi_offset 14, -6
  34 000a FF92      		push r15
  35               		.cfi_def_cfa_offset 8
  36               		.cfi_offset 15, -7
  37 000c 0F93      		push r16
  38               		.cfi_def_cfa_offset 9
  39               		.cfi_offset 16, -8
  40 000e 1F93      		push r17
  41               		.cfi_def_cfa_offset 10
  42               		.cfi_offset 17, -9
  43 0010 CF93      		push r28
  44               		.cfi_def_cfa_offset 11
  45               		.cfi_offset 28, -10
  46 0012 DF93      		push r29
  47               		.cfi_def_cfa_offset 12
  48               		.cfi_offset 29, -11
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 10 */
  52               	.L__stack_usage = 10
  53 0014 7B01      		movw r14,r22
  53:logger/logger.c **** 	if(level != LOG_EXT)
  54               		.loc 1 53 2 is_stmt 1 view .LVU2
  55               		.loc 1 53 4 is_stmt 0 view .LVU3
  56 0016 8730      		cpi r24,lo8(7)
  57 0018 01F4      		brne .+2
  58 001a 00C0      		rjmp .L3
  59               	.LBB9:
  54:logger/logger.c **** 	{
  55:logger/logger.c **** 		u8 len;
  60               		.loc 1 55 3 is_stmt 1 view .LVU4
  56:logger/logger.c **** 		u16 x;
  61               		.loc 1 56 3 view .LVU5
  57:logger/logger.c **** 		const char *level_str;
  62               		.loc 1 57 3 view .LVU6
  58:logger/logger.c **** 
  59:logger/logger.c **** 		if(level != LOG_NONE && level != LOG_OFFSET)
  63               		.loc 1 59 3 view .LVU7
  64               		.loc 1 59 24 is_stmt 0 view .LVU8
  65 001c 9BEF      		ldi r25,lo8(-5)
  66 001e 980F      		add r25,r24
  67               		.loc 1 59 5 view .LVU9
  68 0020 9230      		cpi r25,lo8(2)
  69 0022 00F4      		brsh .+2
  70 0024 00C0      		rjmp .L4
  60:logger/logger.c **** 		{
  61:logger/logger.c **** 			level_str = (const char *)pgm_read_word(&_log_msg[level]);
  71               		.loc 1 61 4 is_stmt 1 view .LVU10
  72               	.LBB10:
  73               		.loc 1 61 30 view .LVU11
  74 0026 C82F      		mov r28,r24
  75 0028 D0E0      		ldi r29,0
  76 002a CC0F      		lsl r28
  77 002c DD1F      		rol r29
  78 002e FE01      		movw r30,r28
  79 0030 E050      		subi r30,lo8(-(_log_msg))
  80 0032 F040      		sbci r31,hi8(-(_log_msg))
  81               	.LVL1:
  82               		.loc 1 61 30 view .LVU12
  83               		.loc 1 61 30 view .LVU13
  84               	/* #APP */
  85               	 ;  61 "logger/logger.c" 1
  86 0034 C590      		lpm r12, Z+
  87 0036 D490      		lpm r13, Z
  88               		
  89               	 ;  0 "" 2
  90               	.LVL2:
  91               		.loc 1 61 30 view .LVU14
  92               		.loc 1 61 30 is_stmt 0 view .LVU15
  93               	/* #NOAPP */
  94               	.LBE10:
  62:logger/logger.c **** 
  63:logger/logger.c **** 			serial_tx('[');
  95               		.loc 1 63 4 is_stmt 1 view .LVU16
  96 0038 8BE5      		ldi r24,lo8(91)
  97               	.LVL3:
  98               		.loc 1 63 4 is_stmt 0 view .LVU17
  99 003a 0E94 0000 		call serial_tx
 100               	.LVL4:
  64:logger/logger.c **** 			serial_tx_str_P(level_str);
 101               		.loc 1 64 4 is_stmt 1 view .LVU18
 102 003e C601      		movw r24,r12
 103 0040 0E94 0000 		call serial_tx_str_P
 104               	.LVL5:
  65:logger/logger.c **** 			serial_tx(']');
 105               		.loc 1 65 4 view .LVU19
 106 0044 8DE5      		ldi r24,lo8(93)
 107 0046 0E94 0000 		call serial_tx
 108               	.LVL6:
  66:logger/logger.c **** 
  67:logger/logger.c **** 			len = 2 + strlen_P(level_str);
 109               		.loc 1 67 4 view .LVU20
 110               	.LBB11:
 111               	.LBI11:
 112               		.file 2 "/usr/avr/include/avr/pgmspace.h"
   1:/usr/avr/include/avr/pgmspace.h **** /* Copyright (c) 2002-2007  Marek Michalkiewicz
   2:/usr/avr/include/avr/pgmspace.h ****    Copyright (c) 2006, Carlos Lamas
   3:/usr/avr/include/avr/pgmspace.h ****    Copyright (c) 2009-2010, Jan Waclawek
   4:/usr/avr/include/avr/pgmspace.h ****    All rights reserved.
   5:/usr/avr/include/avr/pgmspace.h **** 
   6:/usr/avr/include/avr/pgmspace.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/avr/pgmspace.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/avr/pgmspace.h **** 
   9:/usr/avr/include/avr/pgmspace.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/avr/pgmspace.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/avr/pgmspace.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/pgmspace.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/pgmspace.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/pgmspace.h ****      distribution.
  15:/usr/avr/include/avr/pgmspace.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/avr/include/avr/pgmspace.h ****      contributors may be used to endorse or promote products derived
  17:/usr/avr/include/avr/pgmspace.h ****      from this software without specific prior written permission.
  18:/usr/avr/include/avr/pgmspace.h **** 
  19:/usr/avr/include/avr/pgmspace.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/avr/include/avr/pgmspace.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/avr/include/avr/pgmspace.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/avr/include/avr/pgmspace.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/avr/include/avr/pgmspace.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/avr/include/avr/pgmspace.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/avr/include/avr/pgmspace.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/avr/include/avr/pgmspace.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/avr/include/avr/pgmspace.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/avr/include/avr/pgmspace.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/avr/include/avr/pgmspace.h ****   POSSIBILITY OF SUCH DAMAGE. */
  30:/usr/avr/include/avr/pgmspace.h **** 
  31:/usr/avr/include/avr/pgmspace.h **** /* $Id: pgmspace.h 2544 2017-08-04 08:50:27Z pitchumani $ */
  32:/usr/avr/include/avr/pgmspace.h **** 
  33:/usr/avr/include/avr/pgmspace.h **** /*
  34:/usr/avr/include/avr/pgmspace.h ****    pgmspace.h
  35:/usr/avr/include/avr/pgmspace.h **** 
  36:/usr/avr/include/avr/pgmspace.h ****    Contributors:
  37:/usr/avr/include/avr/pgmspace.h ****      Created by Marek Michalkiewicz <marekm@linux.org.pl>
  38:/usr/avr/include/avr/pgmspace.h ****      Eric B. Weddington <eric@ecentral.com>
  39:/usr/avr/include/avr/pgmspace.h ****      Wolfgang Haidinger <wh@vmars.tuwien.ac.at> (pgm_read_dword())
  40:/usr/avr/include/avr/pgmspace.h ****      Ivanov Anton <anton@arc.com.ru> (pgm_read_float())
  41:/usr/avr/include/avr/pgmspace.h ****  */
  42:/usr/avr/include/avr/pgmspace.h **** 
  43:/usr/avr/include/avr/pgmspace.h **** /** \file */
  44:/usr/avr/include/avr/pgmspace.h **** /** \defgroup avr_pgmspace <avr/pgmspace.h>: Program Space Utilities
  45:/usr/avr/include/avr/pgmspace.h ****     \code
  46:/usr/avr/include/avr/pgmspace.h ****     #include <avr/io.h>
  47:/usr/avr/include/avr/pgmspace.h ****     #include <avr/pgmspace.h>
  48:/usr/avr/include/avr/pgmspace.h ****     \endcode
  49:/usr/avr/include/avr/pgmspace.h **** 
  50:/usr/avr/include/avr/pgmspace.h ****     The functions in this module provide interfaces for a program to access
  51:/usr/avr/include/avr/pgmspace.h ****     data stored in program space (flash memory) of the device.  In order to
  52:/usr/avr/include/avr/pgmspace.h ****     use these functions, the target device must support either the \c LPM or
  53:/usr/avr/include/avr/pgmspace.h ****     \c ELPM instructions.
  54:/usr/avr/include/avr/pgmspace.h **** 
  55:/usr/avr/include/avr/pgmspace.h ****     \note These functions are an attempt to provide some compatibility with
  56:/usr/avr/include/avr/pgmspace.h ****     header files that come with IAR C, to make porting applications between
  57:/usr/avr/include/avr/pgmspace.h ****     different compilers easier.  This is not 100% compatibility though (GCC
  58:/usr/avr/include/avr/pgmspace.h ****     does not have full support for multiple address spaces yet).
  59:/usr/avr/include/avr/pgmspace.h **** 
  60:/usr/avr/include/avr/pgmspace.h ****     \note If you are working with strings which are completely based in ram,
  61:/usr/avr/include/avr/pgmspace.h ****     use the standard string functions described in \ref avr_string.
  62:/usr/avr/include/avr/pgmspace.h **** 
  63:/usr/avr/include/avr/pgmspace.h ****     \note If possible, put your constant tables in the lower 64 KB and use
  64:/usr/avr/include/avr/pgmspace.h ****     pgm_read_byte_near() or pgm_read_word_near() instead of
  65:/usr/avr/include/avr/pgmspace.h ****     pgm_read_byte_far() or pgm_read_word_far() since it is more efficient that
  66:/usr/avr/include/avr/pgmspace.h ****     way, and you can still use the upper 64K for executable code.
  67:/usr/avr/include/avr/pgmspace.h ****     All functions that are suffixed with a \c _P \e require their
  68:/usr/avr/include/avr/pgmspace.h ****     arguments to be in the lower 64 KB of the flash ROM, as they do
  69:/usr/avr/include/avr/pgmspace.h ****     not use ELPM instructions.  This is normally not a big concern as
  70:/usr/avr/include/avr/pgmspace.h ****     the linker setup arranges any program space constants declared
  71:/usr/avr/include/avr/pgmspace.h ****     using the macros from this header file so they are placed right after
  72:/usr/avr/include/avr/pgmspace.h ****     the interrupt vectors, and in front of any executable code.  However,
  73:/usr/avr/include/avr/pgmspace.h ****     it can become a problem if there are too many of these constants, or
  74:/usr/avr/include/avr/pgmspace.h ****     for bootloaders on devices with more than 64 KB of ROM.
  75:/usr/avr/include/avr/pgmspace.h ****     <em>All these functions will not work in that situation.</em>
  76:/usr/avr/include/avr/pgmspace.h **** 
  77:/usr/avr/include/avr/pgmspace.h ****     \note For <b>Xmega</b> devices, make sure the NVM controller
  78:/usr/avr/include/avr/pgmspace.h ****     command register (\c NVM.CMD or \c NVM_CMD) is set to 0x00 (NOP)
  79:/usr/avr/include/avr/pgmspace.h ****     before using any of these functions.
  80:/usr/avr/include/avr/pgmspace.h **** */
  81:/usr/avr/include/avr/pgmspace.h **** 
  82:/usr/avr/include/avr/pgmspace.h **** #ifndef __PGMSPACE_H_
  83:/usr/avr/include/avr/pgmspace.h **** #define __PGMSPACE_H_ 1
  84:/usr/avr/include/avr/pgmspace.h **** 
  85:/usr/avr/include/avr/pgmspace.h **** #ifndef __DOXYGEN__
  86:/usr/avr/include/avr/pgmspace.h **** #define __need_size_t
  87:/usr/avr/include/avr/pgmspace.h **** #endif
  88:/usr/avr/include/avr/pgmspace.h **** #include <inttypes.h>
  89:/usr/avr/include/avr/pgmspace.h **** #include <stddef.h>
  90:/usr/avr/include/avr/pgmspace.h **** #include <avr/io.h>
  91:/usr/avr/include/avr/pgmspace.h **** 
  92:/usr/avr/include/avr/pgmspace.h **** #ifndef __DOXYGEN__
  93:/usr/avr/include/avr/pgmspace.h **** #ifndef __ATTR_CONST__
  94:/usr/avr/include/avr/pgmspace.h **** #define __ATTR_CONST__ __attribute__((__const__))
  95:/usr/avr/include/avr/pgmspace.h **** #endif
  96:/usr/avr/include/avr/pgmspace.h **** 
  97:/usr/avr/include/avr/pgmspace.h **** #ifndef __ATTR_PROGMEM__
  98:/usr/avr/include/avr/pgmspace.h **** #define __ATTR_PROGMEM__ __attribute__((__progmem__))
  99:/usr/avr/include/avr/pgmspace.h **** #endif
 100:/usr/avr/include/avr/pgmspace.h **** 
 101:/usr/avr/include/avr/pgmspace.h **** #ifndef __ATTR_PURE__
 102:/usr/avr/include/avr/pgmspace.h **** #define __ATTR_PURE__ __attribute__((__pure__))
 103:/usr/avr/include/avr/pgmspace.h **** #endif
 104:/usr/avr/include/avr/pgmspace.h **** #endif	/* !__DOXYGEN__ */
 105:/usr/avr/include/avr/pgmspace.h **** 
 106:/usr/avr/include/avr/pgmspace.h **** /**
 107:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 108:/usr/avr/include/avr/pgmspace.h ****    \def PROGMEM
 109:/usr/avr/include/avr/pgmspace.h **** 
 110:/usr/avr/include/avr/pgmspace.h ****    Attribute to use in order to declare an object being located in
 111:/usr/avr/include/avr/pgmspace.h ****    flash ROM.
 112:/usr/avr/include/avr/pgmspace.h ****  */
 113:/usr/avr/include/avr/pgmspace.h **** #define PROGMEM __ATTR_PROGMEM__
 114:/usr/avr/include/avr/pgmspace.h **** 
 115:/usr/avr/include/avr/pgmspace.h **** #ifdef __cplusplus
 116:/usr/avr/include/avr/pgmspace.h **** extern "C" {
 117:/usr/avr/include/avr/pgmspace.h **** #endif
 118:/usr/avr/include/avr/pgmspace.h **** 
 119:/usr/avr/include/avr/pgmspace.h **** #if defined(__DOXYGEN__)
 120:/usr/avr/include/avr/pgmspace.h **** /*
 121:/usr/avr/include/avr/pgmspace.h ****  * Doxygen doesn't grok the appended attribute syntax of
 122:/usr/avr/include/avr/pgmspace.h ****  * GCC, and confuses the typedefs with function decls, so
 123:/usr/avr/include/avr/pgmspace.h ****  * supply a doxygen-friendly view.
 124:/usr/avr/include/avr/pgmspace.h ****  */
 125:/usr/avr/include/avr/pgmspace.h **** 
 126:/usr/avr/include/avr/pgmspace.h **** /**
 127:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 128:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_void
 129:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 130:/usr/avr/include/avr/pgmspace.h **** 
 131:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 132:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 133:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 134:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 135:/usr/avr/include/avr/pgmspace.h **** 
 136:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 137:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 138:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 139:/usr/avr/include/avr/pgmspace.h **** 
 140:/usr/avr/include/avr/pgmspace.h ****    Type of a "void" object located in flash ROM.  Does not make much
 141:/usr/avr/include/avr/pgmspace.h ****    sense by itself, but can be used to declare a "void *" object in
 142:/usr/avr/include/avr/pgmspace.h ****    flash ROM.
 143:/usr/avr/include/avr/pgmspace.h **** */
 144:/usr/avr/include/avr/pgmspace.h **** typedef void PROGMEM prog_void;
 145:/usr/avr/include/avr/pgmspace.h **** 
 146:/usr/avr/include/avr/pgmspace.h **** /**
 147:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 148:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_char
 149:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 150:/usr/avr/include/avr/pgmspace.h **** 
 151:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 152:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 153:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 154:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 155:/usr/avr/include/avr/pgmspace.h **** 
 156:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 157:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 158:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 159:/usr/avr/include/avr/pgmspace.h **** 
 160:/usr/avr/include/avr/pgmspace.h ****    Type of a "char" object located in flash ROM.
 161:/usr/avr/include/avr/pgmspace.h **** */
 162:/usr/avr/include/avr/pgmspace.h **** typedef char PROGMEM prog_char;
 163:/usr/avr/include/avr/pgmspace.h **** 
 164:/usr/avr/include/avr/pgmspace.h **** /**
 165:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 166:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_uchar
 167:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 168:/usr/avr/include/avr/pgmspace.h **** 
 169:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 170:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 171:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 172:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 173:/usr/avr/include/avr/pgmspace.h **** 
 174:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 175:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 176:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 177:/usr/avr/include/avr/pgmspace.h **** 
 178:/usr/avr/include/avr/pgmspace.h ****    Type of an "unsigned char" object located in flash ROM.
 179:/usr/avr/include/avr/pgmspace.h **** */
 180:/usr/avr/include/avr/pgmspace.h **** typedef unsigned char PROGMEM prog_uchar;
 181:/usr/avr/include/avr/pgmspace.h **** 
 182:/usr/avr/include/avr/pgmspace.h **** /**
 183:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 184:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_int8_t
 185:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 186:/usr/avr/include/avr/pgmspace.h **** 
 187:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 188:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 189:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 190:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 191:/usr/avr/include/avr/pgmspace.h **** 
 192:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 193:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 194:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 195:/usr/avr/include/avr/pgmspace.h **** 
 196:/usr/avr/include/avr/pgmspace.h ****    Type of an "int8_t" object located in flash ROM.
 197:/usr/avr/include/avr/pgmspace.h **** */
 198:/usr/avr/include/avr/pgmspace.h **** typedef int8_t PROGMEM prog_int8_t;
 199:/usr/avr/include/avr/pgmspace.h **** 
 200:/usr/avr/include/avr/pgmspace.h **** /**
 201:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 202:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_uint8_t
 203:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 204:/usr/avr/include/avr/pgmspace.h **** 
 205:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 206:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 207:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 208:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 209:/usr/avr/include/avr/pgmspace.h **** 
 210:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 211:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 212:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 213:/usr/avr/include/avr/pgmspace.h **** 
 214:/usr/avr/include/avr/pgmspace.h ****    Type of an "uint8_t" object located in flash ROM.
 215:/usr/avr/include/avr/pgmspace.h **** */
 216:/usr/avr/include/avr/pgmspace.h **** typedef uint8_t PROGMEM prog_uint8_t;
 217:/usr/avr/include/avr/pgmspace.h **** 
 218:/usr/avr/include/avr/pgmspace.h **** /**
 219:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 220:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_int16_t
 221:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 222:/usr/avr/include/avr/pgmspace.h **** 
 223:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 224:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 225:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 226:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 227:/usr/avr/include/avr/pgmspace.h **** 
 228:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 229:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 230:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 231:/usr/avr/include/avr/pgmspace.h **** 
 232:/usr/avr/include/avr/pgmspace.h ****    Type of an "int16_t" object located in flash ROM.
 233:/usr/avr/include/avr/pgmspace.h **** */
 234:/usr/avr/include/avr/pgmspace.h **** typedef int16_t PROGMEM prog_int16_t;
 235:/usr/avr/include/avr/pgmspace.h **** 
 236:/usr/avr/include/avr/pgmspace.h **** /**
 237:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 238:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_uint16_t
 239:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 240:/usr/avr/include/avr/pgmspace.h **** 
 241:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 242:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 243:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 244:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 245:/usr/avr/include/avr/pgmspace.h **** 
 246:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 247:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 248:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 249:/usr/avr/include/avr/pgmspace.h **** 
 250:/usr/avr/include/avr/pgmspace.h ****    Type of an "uint16_t" object located in flash ROM.
 251:/usr/avr/include/avr/pgmspace.h **** */
 252:/usr/avr/include/avr/pgmspace.h **** typedef uint16_t PROGMEM prog_uint16_t;
 253:/usr/avr/include/avr/pgmspace.h **** 
 254:/usr/avr/include/avr/pgmspace.h **** /**
 255:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 256:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_int32_t
 257:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 258:/usr/avr/include/avr/pgmspace.h **** 
 259:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 260:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 261:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 262:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 263:/usr/avr/include/avr/pgmspace.h **** 
 264:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 265:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 266:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 267:/usr/avr/include/avr/pgmspace.h **** 
 268:/usr/avr/include/avr/pgmspace.h ****    Type of an "int32_t" object located in flash ROM.
 269:/usr/avr/include/avr/pgmspace.h **** */
 270:/usr/avr/include/avr/pgmspace.h **** typedef int32_t PROGMEM prog_int32_t;
 271:/usr/avr/include/avr/pgmspace.h **** 
 272:/usr/avr/include/avr/pgmspace.h **** /**
 273:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 274:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_uint32_t
 275:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 276:/usr/avr/include/avr/pgmspace.h **** 
 277:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 278:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 279:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 280:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 281:/usr/avr/include/avr/pgmspace.h **** 
 282:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 283:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 284:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 285:/usr/avr/include/avr/pgmspace.h **** 
 286:/usr/avr/include/avr/pgmspace.h ****    Type of an "uint32_t" object located in flash ROM.
 287:/usr/avr/include/avr/pgmspace.h **** */
 288:/usr/avr/include/avr/pgmspace.h **** typedef uint32_t PROGMEM prog_uint32_t;
 289:/usr/avr/include/avr/pgmspace.h **** 
 290:/usr/avr/include/avr/pgmspace.h **** /**
 291:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 292:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_int64_t
 293:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 294:/usr/avr/include/avr/pgmspace.h **** 
 295:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 296:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 297:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 298:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 299:/usr/avr/include/avr/pgmspace.h **** 
 300:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 301:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 302:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 303:/usr/avr/include/avr/pgmspace.h **** 
 304:/usr/avr/include/avr/pgmspace.h ****    Type of an "int64_t" object located in flash ROM.
 305:/usr/avr/include/avr/pgmspace.h **** 
 306:/usr/avr/include/avr/pgmspace.h ****    \note This type is not available when the compiler
 307:/usr/avr/include/avr/pgmspace.h ****    option -mint8 is in effect.
 308:/usr/avr/include/avr/pgmspace.h **** */
 309:/usr/avr/include/avr/pgmspace.h **** typedef int64_t PROGMEM prog_int64_t;
 310:/usr/avr/include/avr/pgmspace.h **** 
 311:/usr/avr/include/avr/pgmspace.h **** /**
 312:/usr/avr/include/avr/pgmspace.h ****    \ingroup avr_pgmspace
 313:/usr/avr/include/avr/pgmspace.h ****    \typedef prog_uint64_t
 314:/usr/avr/include/avr/pgmspace.h ****    \note DEPRECATED
 315:/usr/avr/include/avr/pgmspace.h **** 
 316:/usr/avr/include/avr/pgmspace.h ****    This typedef is now deprecated because the usage of the __progmem__ 
 317:/usr/avr/include/avr/pgmspace.h ****    attribute on a type is not supported in GCC. However, the use of the 
 318:/usr/avr/include/avr/pgmspace.h ****    __progmem__ attribute on a variable declaration is supported, and this is 
 319:/usr/avr/include/avr/pgmspace.h ****    now the recommended usage.
 320:/usr/avr/include/avr/pgmspace.h **** 
 321:/usr/avr/include/avr/pgmspace.h ****    The typedef is only visible if the macro __PROG_TYPES_COMPAT__
 322:/usr/avr/include/avr/pgmspace.h ****    has been defined before including <avr/pgmspace.h> (either by a
 323:/usr/avr/include/avr/pgmspace.h ****    \c \#define directive, or by a -D compiler option.)
 324:/usr/avr/include/avr/pgmspace.h **** 
 325:/usr/avr/include/avr/pgmspace.h ****    Type of an "uint64_t" object located in flash ROM.
 326:/usr/avr/include/avr/pgmspace.h **** 
 327:/usr/avr/include/avr/pgmspace.h ****    \note This type is not available when the compiler
 328:/usr/avr/include/avr/pgmspace.h ****    option -mint8 is in effect.
 329:/usr/avr/include/avr/pgmspace.h **** */
 330:/usr/avr/include/avr/pgmspace.h **** typedef uint64_t PROGMEM prog_uint64_t;
 331:/usr/avr/include/avr/pgmspace.h **** 
 332:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 333:/usr/avr/include/avr/pgmspace.h ****     \def PGM_P
 334:/usr/avr/include/avr/pgmspace.h **** 
 335:/usr/avr/include/avr/pgmspace.h ****     Used to declare a variable that is a pointer to a string in program
 336:/usr/avr/include/avr/pgmspace.h ****     space. */
 337:/usr/avr/include/avr/pgmspace.h **** 
 338:/usr/avr/include/avr/pgmspace.h **** #ifndef PGM_P
 339:/usr/avr/include/avr/pgmspace.h **** #define PGM_P const char *
 340:/usr/avr/include/avr/pgmspace.h **** #endif
 341:/usr/avr/include/avr/pgmspace.h **** 
 342:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 343:/usr/avr/include/avr/pgmspace.h ****     \def PGM_VOID_P
 344:/usr/avr/include/avr/pgmspace.h **** 
 345:/usr/avr/include/avr/pgmspace.h ****     Used to declare a generic pointer to an object in program space. */
 346:/usr/avr/include/avr/pgmspace.h **** 
 347:/usr/avr/include/avr/pgmspace.h **** #ifndef PGM_VOID_P
 348:/usr/avr/include/avr/pgmspace.h **** #define PGM_VOID_P const void *
 349:/usr/avr/include/avr/pgmspace.h **** #endif
 350:/usr/avr/include/avr/pgmspace.h **** 
 351:/usr/avr/include/avr/pgmspace.h **** #elif defined(__PROG_TYPES_COMPAT__)  /* !DOXYGEN */
 352:/usr/avr/include/avr/pgmspace.h **** 
 353:/usr/avr/include/avr/pgmspace.h **** typedef void prog_void __attribute__((__progmem__,deprecated("prog_void type is deprecated.")));
 354:/usr/avr/include/avr/pgmspace.h **** typedef char prog_char __attribute__((__progmem__,deprecated("prog_char type is deprecated.")));
 355:/usr/avr/include/avr/pgmspace.h **** typedef unsigned char prog_uchar __attribute__((__progmem__,deprecated("prog_uchar type is deprecat
 356:/usr/avr/include/avr/pgmspace.h **** typedef int8_t    prog_int8_t   __attribute__((__progmem__,deprecated("prog_int8_t type is deprecat
 357:/usr/avr/include/avr/pgmspace.h **** typedef uint8_t   prog_uint8_t  __attribute__((__progmem__,deprecated("prog_uint8_t type is depreca
 358:/usr/avr/include/avr/pgmspace.h **** typedef int16_t   prog_int16_t  __attribute__((__progmem__,deprecated("prog_int16_t type is depreca
 359:/usr/avr/include/avr/pgmspace.h **** typedef uint16_t  prog_uint16_t __attribute__((__progmem__,deprecated("prog_uint16_t type is deprec
 360:/usr/avr/include/avr/pgmspace.h **** typedef int32_t   prog_int32_t  __attribute__((__progmem__,deprecated("prog_int32_t type is depreca
 361:/usr/avr/include/avr/pgmspace.h **** typedef uint32_t  prog_uint32_t __attribute__((__progmem__,deprecated("prog_uint32_t type is deprec
 362:/usr/avr/include/avr/pgmspace.h **** #if !__USING_MINT8
 363:/usr/avr/include/avr/pgmspace.h **** typedef int64_t   prog_int64_t  __attribute__((__progmem__,deprecated("prog_int64_t type is depreca
 364:/usr/avr/include/avr/pgmspace.h **** typedef uint64_t  prog_uint64_t __attribute__((__progmem__,deprecated("prog_uint64_t type is deprec
 365:/usr/avr/include/avr/pgmspace.h **** #endif
 366:/usr/avr/include/avr/pgmspace.h **** 
 367:/usr/avr/include/avr/pgmspace.h **** #ifndef PGM_P
 368:/usr/avr/include/avr/pgmspace.h **** #define PGM_P const prog_char *
 369:/usr/avr/include/avr/pgmspace.h **** #endif
 370:/usr/avr/include/avr/pgmspace.h **** 
 371:/usr/avr/include/avr/pgmspace.h **** #ifndef PGM_VOID_P
 372:/usr/avr/include/avr/pgmspace.h **** #define PGM_VOID_P const prog_void *
 373:/usr/avr/include/avr/pgmspace.h **** #endif
 374:/usr/avr/include/avr/pgmspace.h **** 
 375:/usr/avr/include/avr/pgmspace.h **** #else /* !defined(__DOXYGEN__), !defined(__PROG_TYPES_COMPAT__) */
 376:/usr/avr/include/avr/pgmspace.h **** 
 377:/usr/avr/include/avr/pgmspace.h **** #ifndef PGM_P
 378:/usr/avr/include/avr/pgmspace.h **** #define PGM_P const char *
 379:/usr/avr/include/avr/pgmspace.h **** #endif
 380:/usr/avr/include/avr/pgmspace.h **** 
 381:/usr/avr/include/avr/pgmspace.h **** #ifndef PGM_VOID_P
 382:/usr/avr/include/avr/pgmspace.h **** #define PGM_VOID_P const void *
 383:/usr/avr/include/avr/pgmspace.h **** #endif
 384:/usr/avr/include/avr/pgmspace.h **** #endif /* defined(__DOXYGEN__), defined(__PROG_TYPES_COMPAT__) */
 385:/usr/avr/include/avr/pgmspace.h **** 
 386:/usr/avr/include/avr/pgmspace.h **** /* Although in C, we can get away with just using __c, it does not work in
 387:/usr/avr/include/avr/pgmspace.h ****    C++. We need to use &__c[0] to avoid the compiler puking. Dave Hylands
 388:/usr/avr/include/avr/pgmspace.h ****    explaned it thusly,
 389:/usr/avr/include/avr/pgmspace.h **** 
 390:/usr/avr/include/avr/pgmspace.h ****      Let's suppose that we use PSTR("Test"). In this case, the type returned
 391:/usr/avr/include/avr/pgmspace.h ****      by __c is a prog_char[5] and not a prog_char *. While these are
 392:/usr/avr/include/avr/pgmspace.h ****      compatible, they aren't the same thing (especially in C++). The type
 393:/usr/avr/include/avr/pgmspace.h ****      returned by &__c[0] is a prog_char *, which explains why it works
 394:/usr/avr/include/avr/pgmspace.h ****      fine. */
 395:/usr/avr/include/avr/pgmspace.h **** 
 396:/usr/avr/include/avr/pgmspace.h **** #if defined(__DOXYGEN__)
 397:/usr/avr/include/avr/pgmspace.h **** /*
 398:/usr/avr/include/avr/pgmspace.h ****  * The #define below is just a dummy that serves documentation
 399:/usr/avr/include/avr/pgmspace.h ****  * purposes only.
 400:/usr/avr/include/avr/pgmspace.h ****  */
 401:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 402:/usr/avr/include/avr/pgmspace.h ****     \def PSTR(s)
 403:/usr/avr/include/avr/pgmspace.h **** 
 404:/usr/avr/include/avr/pgmspace.h ****     Used to declare a static pointer to a string in program space. */
 405:/usr/avr/include/avr/pgmspace.h **** # define PSTR(s) ((const PROGMEM char *)(s))
 406:/usr/avr/include/avr/pgmspace.h **** #else  /* !DOXYGEN */
 407:/usr/avr/include/avr/pgmspace.h **** /* The real thing. */
 408:/usr/avr/include/avr/pgmspace.h **** # define PSTR(s) (__extension__({static const char __c[] PROGMEM = (s); &__c[0];}))
 409:/usr/avr/include/avr/pgmspace.h **** #endif /* DOXYGEN */
 410:/usr/avr/include/avr/pgmspace.h **** 
 411:/usr/avr/include/avr/pgmspace.h **** #ifndef __DOXYGEN__ /* Internal macros, not documented. */
 412:/usr/avr/include/avr/pgmspace.h **** #define __LPM_classic__(addr)   \
 413:/usr/avr/include/avr/pgmspace.h **** (__extension__({                \
 414:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr); \
 415:/usr/avr/include/avr/pgmspace.h ****     uint8_t __result;           \
 416:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__        \
 417:/usr/avr/include/avr/pgmspace.h ****     (                           \
 418:/usr/avr/include/avr/pgmspace.h ****         "lpm" "\n\t"            \
 419:/usr/avr/include/avr/pgmspace.h ****         "mov %0, r0" "\n\t"     \
 420:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)       \
 421:/usr/avr/include/avr/pgmspace.h ****         : "z" (__addr16)        \
 422:/usr/avr/include/avr/pgmspace.h ****         : "r0"                  \
 423:/usr/avr/include/avr/pgmspace.h ****     );                          \
 424:/usr/avr/include/avr/pgmspace.h ****     __result;                   \
 425:/usr/avr/include/avr/pgmspace.h **** }))
 426:/usr/avr/include/avr/pgmspace.h **** 
 427:/usr/avr/include/avr/pgmspace.h **** #define __LPM_enhanced__(addr)  \
 428:/usr/avr/include/avr/pgmspace.h **** (__extension__({                \
 429:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr); \
 430:/usr/avr/include/avr/pgmspace.h ****     uint8_t __result;           \
 431:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__        \
 432:/usr/avr/include/avr/pgmspace.h ****     (                           \
 433:/usr/avr/include/avr/pgmspace.h ****         "lpm %0, Z" "\n\t"      \
 434:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)       \
 435:/usr/avr/include/avr/pgmspace.h ****         : "z" (__addr16)        \
 436:/usr/avr/include/avr/pgmspace.h ****     );                          \
 437:/usr/avr/include/avr/pgmspace.h ****     __result;                   \
 438:/usr/avr/include/avr/pgmspace.h **** }))
 439:/usr/avr/include/avr/pgmspace.h **** 
 440:/usr/avr/include/avr/pgmspace.h **** #define __LPM_word_classic__(addr)          \
 441:/usr/avr/include/avr/pgmspace.h **** (__extension__({                            \
 442:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr);   \
 443:/usr/avr/include/avr/pgmspace.h ****     uint16_t __result;                      \
 444:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                    \
 445:/usr/avr/include/avr/pgmspace.h ****     (                                       \
 446:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 447:/usr/avr/include/avr/pgmspace.h ****         "mov %A0, r0"   "\n\t"              \
 448:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 449:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 450:/usr/avr/include/avr/pgmspace.h ****         "mov %B0, r0"   "\n\t"              \
 451:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result), "=z" (__addr16)  \
 452:/usr/avr/include/avr/pgmspace.h ****         : "1" (__addr16)                    \
 453:/usr/avr/include/avr/pgmspace.h ****         : "r0"                              \
 454:/usr/avr/include/avr/pgmspace.h ****     );                                      \
 455:/usr/avr/include/avr/pgmspace.h ****     __result;                               \
 456:/usr/avr/include/avr/pgmspace.h **** }))
 457:/usr/avr/include/avr/pgmspace.h **** 
 458:/usr/avr/include/avr/pgmspace.h **** #define __LPM_word_enhanced__(addr)         \
 459:/usr/avr/include/avr/pgmspace.h **** (__extension__({                            \
 460:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr);   \
 461:/usr/avr/include/avr/pgmspace.h ****     uint16_t __result;                      \
 462:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                    \
 463:/usr/avr/include/avr/pgmspace.h ****     (                                       \
 464:/usr/avr/include/avr/pgmspace.h ****         "lpm %A0, Z+"   "\n\t"              \
 465:/usr/avr/include/avr/pgmspace.h ****         "lpm %B0, Z"    "\n\t"              \
 466:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result), "=z" (__addr16)  \
 467:/usr/avr/include/avr/pgmspace.h ****         : "1" (__addr16)                    \
 468:/usr/avr/include/avr/pgmspace.h ****     );                                      \
 469:/usr/avr/include/avr/pgmspace.h ****     __result;                               \
 470:/usr/avr/include/avr/pgmspace.h **** }))
 471:/usr/avr/include/avr/pgmspace.h **** 
 472:/usr/avr/include/avr/pgmspace.h **** #define __LPM_dword_classic__(addr)         \
 473:/usr/avr/include/avr/pgmspace.h **** (__extension__({                            \
 474:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr);   \
 475:/usr/avr/include/avr/pgmspace.h ****     uint32_t __result;                      \
 476:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                    \
 477:/usr/avr/include/avr/pgmspace.h ****     (                                       \
 478:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 479:/usr/avr/include/avr/pgmspace.h ****         "mov %A0, r0"   "\n\t"              \
 480:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 481:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 482:/usr/avr/include/avr/pgmspace.h ****         "mov %B0, r0"   "\n\t"              \
 483:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 484:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 485:/usr/avr/include/avr/pgmspace.h ****         "mov %C0, r0"   "\n\t"              \
 486:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 487:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 488:/usr/avr/include/avr/pgmspace.h ****         "mov %D0, r0"   "\n\t"              \
 489:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result), "=z" (__addr16)  \
 490:/usr/avr/include/avr/pgmspace.h ****         : "1" (__addr16)                    \
 491:/usr/avr/include/avr/pgmspace.h ****         : "r0"                              \
 492:/usr/avr/include/avr/pgmspace.h ****     );                                      \
 493:/usr/avr/include/avr/pgmspace.h ****     __result;                               \
 494:/usr/avr/include/avr/pgmspace.h **** }))
 495:/usr/avr/include/avr/pgmspace.h **** 
 496:/usr/avr/include/avr/pgmspace.h **** #define __LPM_dword_enhanced__(addr)        \
 497:/usr/avr/include/avr/pgmspace.h **** (__extension__({                            \
 498:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr);   \
 499:/usr/avr/include/avr/pgmspace.h ****     uint32_t __result;                      \
 500:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                    \
 501:/usr/avr/include/avr/pgmspace.h ****     (                                       \
 502:/usr/avr/include/avr/pgmspace.h ****         "lpm %A0, Z+"   "\n\t"              \
 503:/usr/avr/include/avr/pgmspace.h ****         "lpm %B0, Z+"   "\n\t"              \
 504:/usr/avr/include/avr/pgmspace.h ****         "lpm %C0, Z+"   "\n\t"              \
 505:/usr/avr/include/avr/pgmspace.h ****         "lpm %D0, Z"    "\n\t"              \
 506:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result), "=z" (__addr16)  \
 507:/usr/avr/include/avr/pgmspace.h ****         : "1" (__addr16)                    \
 508:/usr/avr/include/avr/pgmspace.h ****     );                                      \
 509:/usr/avr/include/avr/pgmspace.h ****     __result;                               \
 510:/usr/avr/include/avr/pgmspace.h **** }))
 511:/usr/avr/include/avr/pgmspace.h **** 
 512:/usr/avr/include/avr/pgmspace.h **** #define __LPM_float_classic__(addr)         \
 513:/usr/avr/include/avr/pgmspace.h **** (__extension__({                            \
 514:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr);   \
 515:/usr/avr/include/avr/pgmspace.h ****     float __result;                         \
 516:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                    \
 517:/usr/avr/include/avr/pgmspace.h ****     (                                       \
 518:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 519:/usr/avr/include/avr/pgmspace.h ****         "mov %A0, r0"   "\n\t"              \
 520:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 521:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 522:/usr/avr/include/avr/pgmspace.h ****         "mov %B0, r0"   "\n\t"              \
 523:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 524:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 525:/usr/avr/include/avr/pgmspace.h ****         "mov %C0, r0"   "\n\t"              \
 526:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"              \
 527:/usr/avr/include/avr/pgmspace.h ****         "lpm"           "\n\t"              \
 528:/usr/avr/include/avr/pgmspace.h ****         "mov %D0, r0"   "\n\t"              \
 529:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result), "=z" (__addr16)  \
 530:/usr/avr/include/avr/pgmspace.h ****         : "1" (__addr16)                    \
 531:/usr/avr/include/avr/pgmspace.h ****         : "r0"                              \
 532:/usr/avr/include/avr/pgmspace.h ****     );                                      \
 533:/usr/avr/include/avr/pgmspace.h ****     __result;                               \
 534:/usr/avr/include/avr/pgmspace.h **** }))
 535:/usr/avr/include/avr/pgmspace.h **** 
 536:/usr/avr/include/avr/pgmspace.h **** #define __LPM_float_enhanced__(addr)        \
 537:/usr/avr/include/avr/pgmspace.h **** (__extension__({                            \
 538:/usr/avr/include/avr/pgmspace.h ****     uint16_t __addr16 = (uint16_t)(addr);   \
 539:/usr/avr/include/avr/pgmspace.h ****     float __result;                         \
 540:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                    \
 541:/usr/avr/include/avr/pgmspace.h ****     (                                       \
 542:/usr/avr/include/avr/pgmspace.h ****         "lpm %A0, Z+"   "\n\t"              \
 543:/usr/avr/include/avr/pgmspace.h ****         "lpm %B0, Z+"   "\n\t"              \
 544:/usr/avr/include/avr/pgmspace.h ****         "lpm %C0, Z+"   "\n\t"              \
 545:/usr/avr/include/avr/pgmspace.h ****         "lpm %D0, Z"    "\n\t"              \
 546:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result), "=z" (__addr16)  \
 547:/usr/avr/include/avr/pgmspace.h ****         : "1" (__addr16)                    \
 548:/usr/avr/include/avr/pgmspace.h ****     );                                      \
 549:/usr/avr/include/avr/pgmspace.h ****     __result;                               \
 550:/usr/avr/include/avr/pgmspace.h **** }))
 551:/usr/avr/include/avr/pgmspace.h **** 
 552:/usr/avr/include/avr/pgmspace.h **** #if defined (__AVR_HAVE_LPMX__)
 553:/usr/avr/include/avr/pgmspace.h **** #define __LPM(addr)         __LPM_enhanced__(addr)
 554:/usr/avr/include/avr/pgmspace.h **** #define __LPM_word(addr)    __LPM_word_enhanced__(addr)
 555:/usr/avr/include/avr/pgmspace.h **** #define __LPM_dword(addr)   __LPM_dword_enhanced__(addr)
 556:/usr/avr/include/avr/pgmspace.h **** #define __LPM_float(addr)   __LPM_float_enhanced__(addr)
 557:/usr/avr/include/avr/pgmspace.h **** #else
 558:/usr/avr/include/avr/pgmspace.h **** #define __LPM(addr)         __LPM_classic__(addr)
 559:/usr/avr/include/avr/pgmspace.h **** #define __LPM_word(addr)    __LPM_word_classic__(addr)
 560:/usr/avr/include/avr/pgmspace.h **** #define __LPM_dword(addr)   __LPM_dword_classic__(addr)
 561:/usr/avr/include/avr/pgmspace.h **** #define __LPM_float(addr)   __LPM_float_classic__(addr)
 562:/usr/avr/include/avr/pgmspace.h **** #endif
 563:/usr/avr/include/avr/pgmspace.h **** 
 564:/usr/avr/include/avr/pgmspace.h **** #endif  /* !__DOXYGEN__ */
 565:/usr/avr/include/avr/pgmspace.h **** 
 566:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 567:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_byte_near(address_short)
 568:/usr/avr/include/avr/pgmspace.h ****     Read a byte from the program space with a 16-bit (near) address. 
 569:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address.
 570:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 571:/usr/avr/include/avr/pgmspace.h **** 
 572:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_byte_near(address_short) __LPM((uint16_t)(address_short))
 573:/usr/avr/include/avr/pgmspace.h **** 
 574:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 575:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_word_near(address_short)
 576:/usr/avr/include/avr/pgmspace.h ****     Read a word from the program space with a 16-bit (near) address. 
 577:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 578:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 579:/usr/avr/include/avr/pgmspace.h **** 
 580:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_word_near(address_short) __LPM_word((uint16_t)(address_short))
 581:/usr/avr/include/avr/pgmspace.h **** 
 582:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 583:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_dword_near(address_short)
 584:/usr/avr/include/avr/pgmspace.h ****     Read a double word from the program space with a 16-bit (near) address. 
 585:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 586:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 587:/usr/avr/include/avr/pgmspace.h **** 
 588:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_dword_near(address_short) \
 589:/usr/avr/include/avr/pgmspace.h ****     __LPM_dword((uint16_t)(address_short))
 590:/usr/avr/include/avr/pgmspace.h **** 
 591:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 592:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_float_near(address_short)
 593:/usr/avr/include/avr/pgmspace.h ****     Read a float from the program space with a 16-bit (near) address. 
 594:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 595:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 596:/usr/avr/include/avr/pgmspace.h **** 
 597:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_float_near(address_short) \
 598:/usr/avr/include/avr/pgmspace.h ****     __LPM_float((uint16_t)(address_short))
 599:/usr/avr/include/avr/pgmspace.h **** 
 600:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 601:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_ptr_near(address_short)
 602:/usr/avr/include/avr/pgmspace.h ****     Read a pointer from the program space with a 16-bit (near) address. 
 603:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 604:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 605:/usr/avr/include/avr/pgmspace.h **** 
 606:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_ptr_near(address_short) \
 607:/usr/avr/include/avr/pgmspace.h ****     (void*)__LPM_word((uint16_t)(address_short))
 608:/usr/avr/include/avr/pgmspace.h **** 
 609:/usr/avr/include/avr/pgmspace.h **** #if defined(RAMPZ) || defined(__DOXYGEN__)
 610:/usr/avr/include/avr/pgmspace.h **** 
 611:/usr/avr/include/avr/pgmspace.h **** /* Only for devices with more than 64K of program memory.
 612:/usr/avr/include/avr/pgmspace.h ****    RAMPZ must be defined (see iom103.h, iom128.h).
 613:/usr/avr/include/avr/pgmspace.h **** */
 614:/usr/avr/include/avr/pgmspace.h **** 
 615:/usr/avr/include/avr/pgmspace.h **** /* The classic functions are needed for ATmega103. */
 616:/usr/avr/include/avr/pgmspace.h **** #ifndef __DOXYGEN__		/* These are internal macros, avoid "is
 617:/usr/avr/include/avr/pgmspace.h **** 				   not documented" warnings. */
 618:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_classic__(addr)      \
 619:/usr/avr/include/avr/pgmspace.h **** (__extension__({                    \
 620:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 621:/usr/avr/include/avr/pgmspace.h ****     uint8_t __result;               \
 622:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__            \
 623:/usr/avr/include/avr/pgmspace.h ****     (                               \
 624:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1" "\n\t"        \
 625:/usr/avr/include/avr/pgmspace.h ****         "mov r31, %B1" "\n\t"       \
 626:/usr/avr/include/avr/pgmspace.h ****         "mov r30, %A1" "\n\t"       \
 627:/usr/avr/include/avr/pgmspace.h ****         "elpm" "\n\t"               \
 628:/usr/avr/include/avr/pgmspace.h ****         "mov %0, r0" "\n\t"         \
 629:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)           \
 630:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),           \
 631:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ)) \
 632:/usr/avr/include/avr/pgmspace.h ****         : "r0", "r30", "r31"        \
 633:/usr/avr/include/avr/pgmspace.h ****     );                              \
 634:/usr/avr/include/avr/pgmspace.h ****     __result;                       \
 635:/usr/avr/include/avr/pgmspace.h **** }))
 636:/usr/avr/include/avr/pgmspace.h **** 
 637:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_enhanced__(addr)     \
 638:/usr/avr/include/avr/pgmspace.h **** (__extension__({                    \
 639:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 640:/usr/avr/include/avr/pgmspace.h ****     uint8_t __result;               \
 641:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__            \
 642:/usr/avr/include/avr/pgmspace.h ****     (                               \
 643:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1" "\n\t"        \
 644:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1" "\n\t"       \
 645:/usr/avr/include/avr/pgmspace.h ****         "elpm %0, Z+" "\n\t"        \
 646:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)           \
 647:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),           \
 648:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ)) \
 649:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"              \
 650:/usr/avr/include/avr/pgmspace.h ****     );                              \
 651:/usr/avr/include/avr/pgmspace.h ****     __result;                       \
 652:/usr/avr/include/avr/pgmspace.h **** }))
 653:/usr/avr/include/avr/pgmspace.h **** 
 654:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_xmega__(addr)        \
 655:/usr/avr/include/avr/pgmspace.h **** (__extension__({                    \
 656:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 657:/usr/avr/include/avr/pgmspace.h ****     uint8_t __result;               \
 658:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__            \
 659:/usr/avr/include/avr/pgmspace.h ****     (                               \
 660:/usr/avr/include/avr/pgmspace.h ****         "in __tmp_reg__, %2" "\n\t" \
 661:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1" "\n\t"        \
 662:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1" "\n\t"       \
 663:/usr/avr/include/avr/pgmspace.h ****         "elpm %0, Z+" "\n\t"        \
 664:/usr/avr/include/avr/pgmspace.h ****         "out %2, __tmp_reg__"       \
 665:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)           \
 666:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),           \
 667:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ)) \
 668:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"              \
 669:/usr/avr/include/avr/pgmspace.h ****     );                              \
 670:/usr/avr/include/avr/pgmspace.h ****     __result;                       \
 671:/usr/avr/include/avr/pgmspace.h **** }))
 672:/usr/avr/include/avr/pgmspace.h **** 
 673:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_word_classic__(addr)     \
 674:/usr/avr/include/avr/pgmspace.h **** (__extension__({                        \
 675:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 676:/usr/avr/include/avr/pgmspace.h ****     uint16_t __result;                  \
 677:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                \
 678:/usr/avr/include/avr/pgmspace.h ****     (                                   \
 679:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"          \
 680:/usr/avr/include/avr/pgmspace.h ****         "mov r31, %B1"  "\n\t"          \
 681:/usr/avr/include/avr/pgmspace.h ****         "mov r30, %A1"  "\n\t"          \
 682:/usr/avr/include/avr/pgmspace.h ****         "elpm"          "\n\t"          \
 683:/usr/avr/include/avr/pgmspace.h ****         "mov %A0, r0"   "\n\t"          \
 684:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"     "\n\t"          \
 685:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"   "\n\t"          \
 686:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"   \
 687:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"    "\n\t"          \
 688:/usr/avr/include/avr/pgmspace.h ****         "elpm"          "\n\t"          \
 689:/usr/avr/include/avr/pgmspace.h ****         "mov %B0, r0"   "\n\t"          \
 690:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)               \
 691:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),               \
 692:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))     \
 693:/usr/avr/include/avr/pgmspace.h ****         : "r0", "r30", "r31"            \
 694:/usr/avr/include/avr/pgmspace.h ****     );                                  \
 695:/usr/avr/include/avr/pgmspace.h ****     __result;                           \
 696:/usr/avr/include/avr/pgmspace.h **** }))
 697:/usr/avr/include/avr/pgmspace.h **** 
 698:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_word_enhanced__(addr)    \
 699:/usr/avr/include/avr/pgmspace.h **** (__extension__({                        \
 700:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 701:/usr/avr/include/avr/pgmspace.h ****     uint16_t __result;                  \
 702:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                \
 703:/usr/avr/include/avr/pgmspace.h ****     (                                   \
 704:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"          \
 705:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1"  "\n\t"          \
 706:/usr/avr/include/avr/pgmspace.h ****         "elpm %A0, Z+"  "\n\t"          \
 707:/usr/avr/include/avr/pgmspace.h ****         "elpm %B0, Z"   "\n\t"          \
 708:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)               \
 709:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),               \
 710:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))     \
 711:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"                  \
 712:/usr/avr/include/avr/pgmspace.h ****     );                                  \
 713:/usr/avr/include/avr/pgmspace.h ****     __result;                           \
 714:/usr/avr/include/avr/pgmspace.h **** }))
 715:/usr/avr/include/avr/pgmspace.h **** 
 716:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_word_xmega__(addr)       \
 717:/usr/avr/include/avr/pgmspace.h **** (__extension__({                        \
 718:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 719:/usr/avr/include/avr/pgmspace.h ****     uint16_t __result;                  \
 720:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                \
 721:/usr/avr/include/avr/pgmspace.h ****     (                                   \
 722:/usr/avr/include/avr/pgmspace.h ****         "in __tmp_reg__, %2" "\n\t"     \
 723:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"          \
 724:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1"  "\n\t"          \
 725:/usr/avr/include/avr/pgmspace.h ****         "elpm %A0, Z+"  "\n\t"          \
 726:/usr/avr/include/avr/pgmspace.h ****         "elpm %B0, Z"   "\n\t"          \
 727:/usr/avr/include/avr/pgmspace.h ****         "out %2, __tmp_reg__"           \
 728:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)               \
 729:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),               \
 730:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))     \
 731:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"                  \
 732:/usr/avr/include/avr/pgmspace.h ****     );                                  \
 733:/usr/avr/include/avr/pgmspace.h ****     __result;                           \
 734:/usr/avr/include/avr/pgmspace.h **** }))
 735:/usr/avr/include/avr/pgmspace.h **** 
 736:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_dword_classic__(addr)      \
 737:/usr/avr/include/avr/pgmspace.h **** (__extension__({                          \
 738:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 739:/usr/avr/include/avr/pgmspace.h ****     uint32_t __result;                    \
 740:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                  \
 741:/usr/avr/include/avr/pgmspace.h ****     (                                     \
 742:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"          "\n\t"     \
 743:/usr/avr/include/avr/pgmspace.h ****         "mov r31, %B1"         "\n\t"     \
 744:/usr/avr/include/avr/pgmspace.h ****         "mov r30, %A1"         "\n\t"     \
 745:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 746:/usr/avr/include/avr/pgmspace.h ****         "mov %A0, r0"          "\n\t"     \
 747:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"            "\n\t"     \
 748:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"          "\n\t"     \
 749:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"     \
 750:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"           "\n\t"     \
 751:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 752:/usr/avr/include/avr/pgmspace.h ****         "mov %B0, r0"          "\n\t"     \
 753:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"            "\n\t"     \
 754:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"          "\n\t"     \
 755:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"     \
 756:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"           "\n\t"     \
 757:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 758:/usr/avr/include/avr/pgmspace.h ****         "mov %C0, r0"          "\n\t"     \
 759:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"            "\n\t"     \
 760:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"          "\n\t"     \
 761:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"     \
 762:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"           "\n\t"     \
 763:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 764:/usr/avr/include/avr/pgmspace.h ****         "mov %D0, r0"          "\n\t"     \
 765:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)                 \
 766:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),                 \
 767:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))       \
 768:/usr/avr/include/avr/pgmspace.h ****         : "r0", "r30", "r31"              \
 769:/usr/avr/include/avr/pgmspace.h ****     );                                    \
 770:/usr/avr/include/avr/pgmspace.h ****     __result;                             \
 771:/usr/avr/include/avr/pgmspace.h **** }))
 772:/usr/avr/include/avr/pgmspace.h **** 
 773:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_dword_enhanced__(addr)     \
 774:/usr/avr/include/avr/pgmspace.h **** (__extension__({                          \
 775:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 776:/usr/avr/include/avr/pgmspace.h ****     uint32_t __result;                    \
 777:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                  \
 778:/usr/avr/include/avr/pgmspace.h ****     (                                     \
 779:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"            \
 780:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1"  "\n\t"            \
 781:/usr/avr/include/avr/pgmspace.h ****         "elpm %A0, Z+"  "\n\t"            \
 782:/usr/avr/include/avr/pgmspace.h ****         "elpm %B0, Z+"  "\n\t"            \
 783:/usr/avr/include/avr/pgmspace.h ****         "elpm %C0, Z+"  "\n\t"            \
 784:/usr/avr/include/avr/pgmspace.h ****         "elpm %D0, Z"   "\n\t"            \
 785:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)                 \
 786:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),                 \
 787:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))       \
 788:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"                    \
 789:/usr/avr/include/avr/pgmspace.h ****     );                                    \
 790:/usr/avr/include/avr/pgmspace.h ****     __result;                             \
 791:/usr/avr/include/avr/pgmspace.h **** }))
 792:/usr/avr/include/avr/pgmspace.h **** 
 793:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_dword_xmega__(addr)        \
 794:/usr/avr/include/avr/pgmspace.h **** (__extension__({                          \
 795:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 796:/usr/avr/include/avr/pgmspace.h ****     uint32_t __result;                    \
 797:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                  \
 798:/usr/avr/include/avr/pgmspace.h ****     (                                     \
 799:/usr/avr/include/avr/pgmspace.h ****         "in __tmp_reg__, %2" "\n\t"       \
 800:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"            \
 801:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1"  "\n\t"            \
 802:/usr/avr/include/avr/pgmspace.h ****         "elpm %A0, Z+"  "\n\t"            \
 803:/usr/avr/include/avr/pgmspace.h ****         "elpm %B0, Z+"  "\n\t"            \
 804:/usr/avr/include/avr/pgmspace.h ****         "elpm %C0, Z+"  "\n\t"            \
 805:/usr/avr/include/avr/pgmspace.h ****         "elpm %D0, Z"   "\n\t"            \
 806:/usr/avr/include/avr/pgmspace.h ****         "out %2, __tmp_reg__"             \
 807:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)                 \
 808:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),                 \
 809:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))       \
 810:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"                    \
 811:/usr/avr/include/avr/pgmspace.h ****     );                                    \
 812:/usr/avr/include/avr/pgmspace.h ****     __result;                             \
 813:/usr/avr/include/avr/pgmspace.h **** }))
 814:/usr/avr/include/avr/pgmspace.h **** 
 815:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_float_classic__(addr)      \
 816:/usr/avr/include/avr/pgmspace.h **** (__extension__({                          \
 817:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 818:/usr/avr/include/avr/pgmspace.h ****     float __result;                       \
 819:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                  \
 820:/usr/avr/include/avr/pgmspace.h ****     (                                     \
 821:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"          "\n\t"     \
 822:/usr/avr/include/avr/pgmspace.h ****         "mov r31, %B1"         "\n\t"     \
 823:/usr/avr/include/avr/pgmspace.h ****         "mov r30, %A1"         "\n\t"     \
 824:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 825:/usr/avr/include/avr/pgmspace.h ****         "mov %A0, r0"          "\n\t"     \
 826:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"            "\n\t"     \
 827:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"          "\n\t"     \
 828:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"     \
 829:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"           "\n\t"     \
 830:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 831:/usr/avr/include/avr/pgmspace.h ****         "mov %B0, r0"          "\n\t"     \
 832:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"            "\n\t"     \
 833:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"          "\n\t"     \
 834:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"     \
 835:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"           "\n\t"     \
 836:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 837:/usr/avr/include/avr/pgmspace.h ****         "mov %C0, r0"          "\n\t"     \
 838:/usr/avr/include/avr/pgmspace.h ****         "in r0, %2"            "\n\t"     \
 839:/usr/avr/include/avr/pgmspace.h ****         "adiw r30, 1"          "\n\t"     \
 840:/usr/avr/include/avr/pgmspace.h ****         "adc r0, __zero_reg__" "\n\t"     \
 841:/usr/avr/include/avr/pgmspace.h ****         "out %2, r0"           "\n\t"     \
 842:/usr/avr/include/avr/pgmspace.h ****         "elpm"                 "\n\t"     \
 843:/usr/avr/include/avr/pgmspace.h ****         "mov %D0, r0"          "\n\t"     \
 844:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)                 \
 845:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),                 \
 846:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))       \
 847:/usr/avr/include/avr/pgmspace.h ****         : "r0", "r30", "r31"              \
 848:/usr/avr/include/avr/pgmspace.h ****     );                                    \
 849:/usr/avr/include/avr/pgmspace.h ****     __result;                             \
 850:/usr/avr/include/avr/pgmspace.h **** }))
 851:/usr/avr/include/avr/pgmspace.h **** 
 852:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_float_enhanced__(addr)     \
 853:/usr/avr/include/avr/pgmspace.h **** (__extension__({                          \
 854:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 855:/usr/avr/include/avr/pgmspace.h ****     float __result;                       \
 856:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                  \
 857:/usr/avr/include/avr/pgmspace.h ****     (                                     \
 858:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"            \
 859:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1"  "\n\t"            \
 860:/usr/avr/include/avr/pgmspace.h ****         "elpm %A0, Z+"  "\n\t"            \
 861:/usr/avr/include/avr/pgmspace.h ****         "elpm %B0, Z+"  "\n\t"            \
 862:/usr/avr/include/avr/pgmspace.h ****         "elpm %C0, Z+"  "\n\t"            \
 863:/usr/avr/include/avr/pgmspace.h ****         "elpm %D0, Z"   "\n\t"            \
 864:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)                 \
 865:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),                 \
 866:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))       \
 867:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"                    \
 868:/usr/avr/include/avr/pgmspace.h ****     );                                    \
 869:/usr/avr/include/avr/pgmspace.h ****     __result;                             \
 870:/usr/avr/include/avr/pgmspace.h **** }))
 871:/usr/avr/include/avr/pgmspace.h **** 
 872:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_float_xmega__(addr)        \
 873:/usr/avr/include/avr/pgmspace.h **** (__extension__({                          \
 874:/usr/avr/include/avr/pgmspace.h ****     uint32_t __addr32 = (uint32_t)(addr); \
 875:/usr/avr/include/avr/pgmspace.h ****     float __result;                       \
 876:/usr/avr/include/avr/pgmspace.h ****     __asm__ __volatile__                  \
 877:/usr/avr/include/avr/pgmspace.h ****     (                                     \
 878:/usr/avr/include/avr/pgmspace.h ****         "in __tmp_reg__, %2" "\n\t"       \
 879:/usr/avr/include/avr/pgmspace.h ****         "out %2, %C1"   "\n\t"            \
 880:/usr/avr/include/avr/pgmspace.h ****         "movw r30, %1"  "\n\t"            \
 881:/usr/avr/include/avr/pgmspace.h ****         "elpm %A0, Z+"  "\n\t"            \
 882:/usr/avr/include/avr/pgmspace.h ****         "elpm %B0, Z+"  "\n\t"            \
 883:/usr/avr/include/avr/pgmspace.h ****         "elpm %C0, Z+"  "\n\t"            \
 884:/usr/avr/include/avr/pgmspace.h ****         "elpm %D0, Z"   "\n\t"            \
 885:/usr/avr/include/avr/pgmspace.h ****         "out %2, __tmp_reg__"             \
 886:/usr/avr/include/avr/pgmspace.h ****         : "=r" (__result)                 \
 887:/usr/avr/include/avr/pgmspace.h ****         : "r" (__addr32),                 \
 888:/usr/avr/include/avr/pgmspace.h ****           "I" (_SFR_IO_ADDR(RAMPZ))       \
 889:/usr/avr/include/avr/pgmspace.h ****         : "r30", "r31"                    \
 890:/usr/avr/include/avr/pgmspace.h ****     );                                    \
 891:/usr/avr/include/avr/pgmspace.h ****     __result;                             \
 892:/usr/avr/include/avr/pgmspace.h **** }))
 893:/usr/avr/include/avr/pgmspace.h **** 
 894:/usr/avr/include/avr/pgmspace.h **** /*
 895:/usr/avr/include/avr/pgmspace.h **** Check for architectures that implement RAMPD (avrxmega5, avrxmega7)
 896:/usr/avr/include/avr/pgmspace.h **** as they need to save/restore RAMPZ for ELPM macros so it does
 897:/usr/avr/include/avr/pgmspace.h **** not interfere with data accesses.
 898:/usr/avr/include/avr/pgmspace.h **** */
 899:/usr/avr/include/avr/pgmspace.h **** #if defined (__AVR_HAVE_RAMPD__)
 900:/usr/avr/include/avr/pgmspace.h **** 
 901:/usr/avr/include/avr/pgmspace.h **** #define __ELPM(addr)        __ELPM_xmega__(addr)
 902:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_word(addr)   __ELPM_word_xmega__(addr)
 903:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_dword(addr)  __ELPM_dword_xmega__(addr)
 904:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_float(addr)  __ELPM_float_xmega__(addr)
 905:/usr/avr/include/avr/pgmspace.h **** 
 906:/usr/avr/include/avr/pgmspace.h **** #else
 907:/usr/avr/include/avr/pgmspace.h **** 
 908:/usr/avr/include/avr/pgmspace.h **** #if defined (__AVR_HAVE_LPMX__)
 909:/usr/avr/include/avr/pgmspace.h **** 
 910:/usr/avr/include/avr/pgmspace.h **** #define __ELPM(addr)        __ELPM_enhanced__(addr)
 911:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_word(addr)   __ELPM_word_enhanced__(addr)
 912:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_dword(addr)  __ELPM_dword_enhanced__(addr)
 913:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_float(addr)  __ELPM_float_enhanced__(addr)
 914:/usr/avr/include/avr/pgmspace.h **** 
 915:/usr/avr/include/avr/pgmspace.h **** #else
 916:/usr/avr/include/avr/pgmspace.h **** 
 917:/usr/avr/include/avr/pgmspace.h **** #define __ELPM(addr)        __ELPM_classic__(addr)
 918:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_word(addr)   __ELPM_word_classic__(addr)
 919:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_dword(addr)  __ELPM_dword_classic__(addr)
 920:/usr/avr/include/avr/pgmspace.h **** #define __ELPM_float(addr)  __ELPM_float_classic__(addr)
 921:/usr/avr/include/avr/pgmspace.h **** 
 922:/usr/avr/include/avr/pgmspace.h **** #endif  /* __AVR_HAVE_LPMX__ */
 923:/usr/avr/include/avr/pgmspace.h **** 
 924:/usr/avr/include/avr/pgmspace.h **** #endif  /* __AVR_HAVE_RAMPD__ */
 925:/usr/avr/include/avr/pgmspace.h **** 
 926:/usr/avr/include/avr/pgmspace.h **** #endif	/* !__DOXYGEN__ */
 927:/usr/avr/include/avr/pgmspace.h **** 
 928:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 929:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_byte_far(address_long)
 930:/usr/avr/include/avr/pgmspace.h ****     Read a byte from the program space with a 32-bit (far) address. 
 931:/usr/avr/include/avr/pgmspace.h **** 
 932:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 933:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 934:/usr/avr/include/avr/pgmspace.h **** 
 935:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_byte_far(address_long)  __ELPM((uint32_t)(address_long))
 936:/usr/avr/include/avr/pgmspace.h **** 
 937:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 938:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_word_far(address_long)
 939:/usr/avr/include/avr/pgmspace.h ****     Read a word from the program space with a 32-bit (far) address. 
 940:/usr/avr/include/avr/pgmspace.h **** 
 941:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address.
 942:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 943:/usr/avr/include/avr/pgmspace.h **** 
 944:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_word_far(address_long)  __ELPM_word((uint32_t)(address_long))
 945:/usr/avr/include/avr/pgmspace.h **** 
 946:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 947:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_dword_far(address_long)
 948:/usr/avr/include/avr/pgmspace.h ****     Read a double word from the program space with a 32-bit (far) address. 
 949:/usr/avr/include/avr/pgmspace.h **** 
 950:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address.
 951:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 952:/usr/avr/include/avr/pgmspace.h **** 
 953:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_dword_far(address_long) __ELPM_dword((uint32_t)(address_long))
 954:/usr/avr/include/avr/pgmspace.h **** 
 955:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 956:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_float_far(address_long)
 957:/usr/avr/include/avr/pgmspace.h ****     Read a float from the program space with a 32-bit (far) address. 
 958:/usr/avr/include/avr/pgmspace.h **** 
 959:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address.
 960:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 961:/usr/avr/include/avr/pgmspace.h **** 
 962:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_float_far(address_long) __ELPM_float((uint32_t)(address_long))
 963:/usr/avr/include/avr/pgmspace.h **** 
 964:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 965:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_ptr_far(address_long)
 966:/usr/avr/include/avr/pgmspace.h ****     Read a pointer from the program space with a 32-bit (far) address. 
 967:/usr/avr/include/avr/pgmspace.h **** 
 968:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address.
 969:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 970:/usr/avr/include/avr/pgmspace.h **** 
 971:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_ptr_far(address_long) (void*)__ELPM_word((uint32_t)(address_long))
 972:/usr/avr/include/avr/pgmspace.h **** 
 973:/usr/avr/include/avr/pgmspace.h **** #endif /* RAMPZ or __DOXYGEN__ */
 974:/usr/avr/include/avr/pgmspace.h **** 
 975:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 976:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_byte(address_short)
 977:/usr/avr/include/avr/pgmspace.h ****     Read a byte from the program space with a 16-bit (near) address. 
 978:/usr/avr/include/avr/pgmspace.h **** 
 979:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 980:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 981:/usr/avr/include/avr/pgmspace.h **** 
 982:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_byte(address_short)    pgm_read_byte_near(address_short)
 983:/usr/avr/include/avr/pgmspace.h **** 
 984:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 985:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_word(address_short)
 986:/usr/avr/include/avr/pgmspace.h ****     Read a word from the program space with a 16-bit (near) address. 
 987:/usr/avr/include/avr/pgmspace.h **** 
 988:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 989:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 990:/usr/avr/include/avr/pgmspace.h **** 
 991:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_word(address_short)    pgm_read_word_near(address_short)
 992:/usr/avr/include/avr/pgmspace.h **** 
 993:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
 994:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_dword(address_short)
 995:/usr/avr/include/avr/pgmspace.h ****     Read a double word from the program space with a 16-bit (near) address. 
 996:/usr/avr/include/avr/pgmspace.h **** 
 997:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
 998:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
 999:/usr/avr/include/avr/pgmspace.h **** 
1000:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_dword(address_short)   pgm_read_dword_near(address_short)
1001:/usr/avr/include/avr/pgmspace.h **** 
1002:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1003:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_float(address_short)
1004:/usr/avr/include/avr/pgmspace.h ****     Read a float from the program space with a 16-bit (near) address. 
1005:/usr/avr/include/avr/pgmspace.h **** 
1006:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
1007:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
1008:/usr/avr/include/avr/pgmspace.h **** 
1009:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_float(address_short)   pgm_read_float_near(address_short)
1010:/usr/avr/include/avr/pgmspace.h **** 
1011:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1012:/usr/avr/include/avr/pgmspace.h ****     \def pgm_read_ptr(address_short)
1013:/usr/avr/include/avr/pgmspace.h ****     Read a pointer from the program space with a 16-bit (near) address. 
1014:/usr/avr/include/avr/pgmspace.h **** 
1015:/usr/avr/include/avr/pgmspace.h ****     \note The address is a byte address. 
1016:/usr/avr/include/avr/pgmspace.h ****     The address is in the program space. */
1017:/usr/avr/include/avr/pgmspace.h **** 
1018:/usr/avr/include/avr/pgmspace.h **** #define pgm_read_ptr(address_short)     pgm_read_ptr_near(address_short)
1019:/usr/avr/include/avr/pgmspace.h **** 
1020:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1021:/usr/avr/include/avr/pgmspace.h ****     \def pgm_get_far_address(var)
1022:/usr/avr/include/avr/pgmspace.h **** 
1023:/usr/avr/include/avr/pgmspace.h ****    This macro facilitates the obtention of a 32 bit "far" pointer (only 24 bits
1024:/usr/avr/include/avr/pgmspace.h ****    used) to data even passed the 64KB limit for the 16 bit ordinary pointer. It
1025:/usr/avr/include/avr/pgmspace.h ****    is similar to the '&' operator, with some limitations.
1026:/usr/avr/include/avr/pgmspace.h **** 
1027:/usr/avr/include/avr/pgmspace.h ****    Comments:
1028:/usr/avr/include/avr/pgmspace.h **** 
1029:/usr/avr/include/avr/pgmspace.h ****    - The overhead is minimal and it's mainly due to the 32 bit size operation.
1030:/usr/avr/include/avr/pgmspace.h **** 
1031:/usr/avr/include/avr/pgmspace.h ****    - 24 bit sizes guarantees the code compatibility for use in future devices.
1032:/usr/avr/include/avr/pgmspace.h **** 
1033:/usr/avr/include/avr/pgmspace.h ****    - hh8() is an undocumented feature but seems to give the third significant byte
1034:/usr/avr/include/avr/pgmspace.h ****      of a 32 bit data and accepts symbols, complementing the functionality of hi8()
1035:/usr/avr/include/avr/pgmspace.h ****      and lo8(). There is not an equivalent assembler function to get the high
1036:/usr/avr/include/avr/pgmspace.h ****      significant byte.
1037:/usr/avr/include/avr/pgmspace.h **** 
1038:/usr/avr/include/avr/pgmspace.h ****    - 'var' has to be resolved at linking time as an existing symbol, i.e, a simple
1039:/usr/avr/include/avr/pgmspace.h ****      type variable name, an array name (not an indexed element of the array, if the
1040:/usr/avr/include/avr/pgmspace.h ****      index is a constant the compiler does not complain but fails to get the address
1041:/usr/avr/include/avr/pgmspace.h ****      if optimization is enabled), a struct name or a struct field name, a function
1042:/usr/avr/include/avr/pgmspace.h ****      identifier, a linker defined identifier,...
1043:/usr/avr/include/avr/pgmspace.h **** 
1044:/usr/avr/include/avr/pgmspace.h ****    - The returned value is the identifier's VMA (virtual memory address) determined
1045:/usr/avr/include/avr/pgmspace.h ****      by the linker and falls in the corresponding memory region. The AVR Harvard
1046:/usr/avr/include/avr/pgmspace.h ****      architecture requires non overlapping VMA areas for the multiple address spaces
1047:/usr/avr/include/avr/pgmspace.h ****      in the processor: Flash ROM, RAM, and EEPROM. Typical offset for this are
1048:/usr/avr/include/avr/pgmspace.h ****      0x00000000, 0x00800xx0, and 0x00810000 respectively, derived from the linker
1049:/usr/avr/include/avr/pgmspace.h ****      script used and linker options. The value returned can be seen then as a
1050:/usr/avr/include/avr/pgmspace.h ****      universal pointer.
1051:/usr/avr/include/avr/pgmspace.h **** */
1052:/usr/avr/include/avr/pgmspace.h **** 
1053:/usr/avr/include/avr/pgmspace.h **** #define pgm_get_far_address(var)                          \
1054:/usr/avr/include/avr/pgmspace.h **** ({                                                    \
1055:/usr/avr/include/avr/pgmspace.h **** 	uint_farptr_t tmp;                                \
1056:/usr/avr/include/avr/pgmspace.h ****                                                       \
1057:/usr/avr/include/avr/pgmspace.h **** 	__asm__ __volatile__(                             \
1058:/usr/avr/include/avr/pgmspace.h ****                                                       \
1059:/usr/avr/include/avr/pgmspace.h **** 			"ldi	%A0, lo8(%1)"           "\n\t"    \
1060:/usr/avr/include/avr/pgmspace.h **** 			"ldi	%B0, hi8(%1)"           "\n\t"    \
1061:/usr/avr/include/avr/pgmspace.h **** 			"ldi	%C0, hh8(%1)"           "\n\t"    \
1062:/usr/avr/include/avr/pgmspace.h **** 			"clr	%D0"                    "\n\t"    \
1063:/usr/avr/include/avr/pgmspace.h **** 		:                                             \
1064:/usr/avr/include/avr/pgmspace.h **** 			"=d" (tmp)                                \
1065:/usr/avr/include/avr/pgmspace.h **** 		:                                             \
1066:/usr/avr/include/avr/pgmspace.h **** 			"p"  (&(var))                             \
1067:/usr/avr/include/avr/pgmspace.h **** 	);                                                \
1068:/usr/avr/include/avr/pgmspace.h **** 	tmp;                                              \
1069:/usr/avr/include/avr/pgmspace.h **** })
1070:/usr/avr/include/avr/pgmspace.h **** 
1071:/usr/avr/include/avr/pgmspace.h **** 
1072:/usr/avr/include/avr/pgmspace.h **** 
1073:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1074:/usr/avr/include/avr/pgmspace.h ****     \fn const void * memchr_P(const void *s, int val, size_t len)
1075:/usr/avr/include/avr/pgmspace.h ****     \brief Scan flash memory for a character.
1076:/usr/avr/include/avr/pgmspace.h **** 
1077:/usr/avr/include/avr/pgmspace.h ****     The memchr_P() function scans the first \p len bytes of the flash
1078:/usr/avr/include/avr/pgmspace.h ****     memory area pointed to by \p s for the character \p val.  The first
1079:/usr/avr/include/avr/pgmspace.h ****     byte to match \p val (interpreted as an unsigned character) stops
1080:/usr/avr/include/avr/pgmspace.h ****     the operation.
1081:/usr/avr/include/avr/pgmspace.h **** 
1082:/usr/avr/include/avr/pgmspace.h ****     \return The memchr_P() function returns a pointer to the matching
1083:/usr/avr/include/avr/pgmspace.h ****     byte or \c NULL if the character does not occur in the given memory
1084:/usr/avr/include/avr/pgmspace.h ****     area.	*/
1085:/usr/avr/include/avr/pgmspace.h **** extern const void * memchr_P(const void *, int __val, size_t __len) __ATTR_CONST__;
1086:/usr/avr/include/avr/pgmspace.h **** 
1087:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1088:/usr/avr/include/avr/pgmspace.h ****     \fn int memcmp_P(const void *s1, const void *s2, size_t len)
1089:/usr/avr/include/avr/pgmspace.h ****     \brief Compare memory areas
1090:/usr/avr/include/avr/pgmspace.h **** 
1091:/usr/avr/include/avr/pgmspace.h ****     The memcmp_P() function compares the first \p len bytes of the memory
1092:/usr/avr/include/avr/pgmspace.h ****     areas \p s1 and flash \p s2. The comparision is performed using unsigned
1093:/usr/avr/include/avr/pgmspace.h ****     char operations.
1094:/usr/avr/include/avr/pgmspace.h **** 
1095:/usr/avr/include/avr/pgmspace.h ****     \returns The memcmp_P() function returns an integer less than, equal
1096:/usr/avr/include/avr/pgmspace.h ****     to, or greater than zero if the first \p len bytes of \p s1 is found,
1097:/usr/avr/include/avr/pgmspace.h ****     respectively, to be less than, to match, or be greater than the first
1098:/usr/avr/include/avr/pgmspace.h ****     \p len bytes of \p s2.	*/
1099:/usr/avr/include/avr/pgmspace.h **** extern int memcmp_P(const void *, const void *, size_t) __ATTR_PURE__;
1100:/usr/avr/include/avr/pgmspace.h **** 
1101:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1102:/usr/avr/include/avr/pgmspace.h ****     \fn void *memccpy_P (void *dest, const void *src, int val, size_t len)
1103:/usr/avr/include/avr/pgmspace.h **** 
1104:/usr/avr/include/avr/pgmspace.h ****     This function is similar to memccpy() except that \p src is pointer
1105:/usr/avr/include/avr/pgmspace.h ****     to a string in program space.	*/
1106:/usr/avr/include/avr/pgmspace.h **** extern void *memccpy_P(void *, const void *, int __val, size_t);
1107:/usr/avr/include/avr/pgmspace.h **** 
1108:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1109:/usr/avr/include/avr/pgmspace.h ****     \fn void *memcpy_P(void *dest, const void *src, size_t n)
1110:/usr/avr/include/avr/pgmspace.h **** 
1111:/usr/avr/include/avr/pgmspace.h ****     The memcpy_P() function is similar to memcpy(), except the src string
1112:/usr/avr/include/avr/pgmspace.h ****     resides in program space.
1113:/usr/avr/include/avr/pgmspace.h **** 
1114:/usr/avr/include/avr/pgmspace.h ****     \returns The memcpy_P() function returns a pointer to dest.  */
1115:/usr/avr/include/avr/pgmspace.h **** extern void *memcpy_P(void *, const void *, size_t);
1116:/usr/avr/include/avr/pgmspace.h **** 
1117:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1118:/usr/avr/include/avr/pgmspace.h ****     \fn void *memmem_P(const void *s1, size_t len1, const void *s2, size_t len2)
1119:/usr/avr/include/avr/pgmspace.h **** 
1120:/usr/avr/include/avr/pgmspace.h ****     The memmem_P() function is similar to memmem() except that \p s2 is
1121:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.	*/
1122:/usr/avr/include/avr/pgmspace.h **** extern void *memmem_P(const void *, size_t, const void *, size_t) __ATTR_PURE__;
1123:/usr/avr/include/avr/pgmspace.h **** 
1124:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1125:/usr/avr/include/avr/pgmspace.h ****     \fn const void +memrchr_P(const void *src, int val, size_t len)
1126:/usr/avr/include/avr/pgmspace.h **** 
1127:/usr/avr/include/avr/pgmspace.h ****     The memrchr_P() function is like the memchr_P() function, except
1128:/usr/avr/include/avr/pgmspace.h ****     that it searches backwards from the end of the \p len bytes pointed
1129:/usr/avr/include/avr/pgmspace.h ****     to by \p src instead of forwards from the front. (Glibc, GNU extension.)
1130:/usr/avr/include/avr/pgmspace.h **** 
1131:/usr/avr/include/avr/pgmspace.h ****     \return The memrchr_P() function returns a pointer to the matching
1132:/usr/avr/include/avr/pgmspace.h ****     byte or \c NULL if the character does not occur in the given memory
1133:/usr/avr/include/avr/pgmspace.h ****     area.	*/
1134:/usr/avr/include/avr/pgmspace.h **** extern const void * memrchr_P(const void *, int __val, size_t __len) __ATTR_CONST__;
1135:/usr/avr/include/avr/pgmspace.h **** 
1136:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1137:/usr/avr/include/avr/pgmspace.h ****     \fn char *strcat_P(char *dest, const char *src)
1138:/usr/avr/include/avr/pgmspace.h **** 
1139:/usr/avr/include/avr/pgmspace.h ****     The strcat_P() function is similar to strcat() except that the \e src
1140:/usr/avr/include/avr/pgmspace.h ****     string must be located in program space (flash).
1141:/usr/avr/include/avr/pgmspace.h **** 
1142:/usr/avr/include/avr/pgmspace.h ****     \returns The strcat() function returns a pointer to the resulting string
1143:/usr/avr/include/avr/pgmspace.h ****     \e dest. */
1144:/usr/avr/include/avr/pgmspace.h **** extern char *strcat_P(char *, const char *);
1145:/usr/avr/include/avr/pgmspace.h **** 
1146:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1147:/usr/avr/include/avr/pgmspace.h ****     \fn const char *strchr_P(const char *s, int val)
1148:/usr/avr/include/avr/pgmspace.h ****     \brief Locate character in program space string.
1149:/usr/avr/include/avr/pgmspace.h **** 
1150:/usr/avr/include/avr/pgmspace.h ****     The strchr_P() function locates the first occurrence of \p val
1151:/usr/avr/include/avr/pgmspace.h ****     (converted to a char) in the string pointed to by \p s in program
1152:/usr/avr/include/avr/pgmspace.h ****     space. The terminating null character is considered to be part of
1153:/usr/avr/include/avr/pgmspace.h ****     the string.
1154:/usr/avr/include/avr/pgmspace.h **** 
1155:/usr/avr/include/avr/pgmspace.h ****     The strchr_P() function is similar to strchr() except that \p s is
1156:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1157:/usr/avr/include/avr/pgmspace.h **** 
1158:/usr/avr/include/avr/pgmspace.h ****     \returns The strchr_P() function returns a pointer to the matched
1159:/usr/avr/include/avr/pgmspace.h ****     character or \c NULL if the character is not found. */
1160:/usr/avr/include/avr/pgmspace.h **** extern const char * strchr_P(const char *, int __val) __ATTR_CONST__;
1161:/usr/avr/include/avr/pgmspace.h **** 
1162:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1163:/usr/avr/include/avr/pgmspace.h ****     \fn const char *strchrnul_P(const char *s, int c)
1164:/usr/avr/include/avr/pgmspace.h **** 
1165:/usr/avr/include/avr/pgmspace.h ****     The strchrnul_P() function is like strchr_P() except that if \p c is
1166:/usr/avr/include/avr/pgmspace.h ****     not found in \p s, then it returns a pointer to the null byte at the
1167:/usr/avr/include/avr/pgmspace.h ****     end of \p s, rather than \c NULL. (Glibc, GNU extension.)
1168:/usr/avr/include/avr/pgmspace.h **** 
1169:/usr/avr/include/avr/pgmspace.h ****     \return The strchrnul_P() function returns a pointer to the matched
1170:/usr/avr/include/avr/pgmspace.h ****     character, or a pointer to the null byte at the end of \p s (i.e.,
1171:/usr/avr/include/avr/pgmspace.h ****     \c s+strlen(s)) if the character is not found.	*/
1172:/usr/avr/include/avr/pgmspace.h **** extern const char * strchrnul_P(const char *, int __val) __ATTR_CONST__;
1173:/usr/avr/include/avr/pgmspace.h **** 
1174:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1175:/usr/avr/include/avr/pgmspace.h ****     \fn int strcmp_P(const char *s1, const char *s2)
1176:/usr/avr/include/avr/pgmspace.h **** 
1177:/usr/avr/include/avr/pgmspace.h ****     The strcmp_P() function is similar to strcmp() except that \p s2 is
1178:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1179:/usr/avr/include/avr/pgmspace.h **** 
1180:/usr/avr/include/avr/pgmspace.h ****     \returns The strcmp_P() function returns an integer less than, equal
1181:/usr/avr/include/avr/pgmspace.h ****     to, or greater than zero if \p s1 is found, respectively, to be less
1182:/usr/avr/include/avr/pgmspace.h ****     than, to match, or be greater than \p s2. A consequence of the
1183:/usr/avr/include/avr/pgmspace.h ****     ordering used by strcmp_P() is that if \p s1 is an initial substring
1184:/usr/avr/include/avr/pgmspace.h ****     of \p s2, then \p s1 is considered to be "less than" \p s2. */
1185:/usr/avr/include/avr/pgmspace.h **** extern int strcmp_P(const char *, const char *) __ATTR_PURE__;
1186:/usr/avr/include/avr/pgmspace.h **** 
1187:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1188:/usr/avr/include/avr/pgmspace.h ****     \fn char *strcpy_P(char *dest, const char *src)
1189:/usr/avr/include/avr/pgmspace.h **** 
1190:/usr/avr/include/avr/pgmspace.h ****     The strcpy_P() function is similar to strcpy() except that src is a
1191:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1192:/usr/avr/include/avr/pgmspace.h **** 
1193:/usr/avr/include/avr/pgmspace.h ****     \returns The strcpy_P() function returns a pointer to the destination
1194:/usr/avr/include/avr/pgmspace.h ****     string dest. */
1195:/usr/avr/include/avr/pgmspace.h **** extern char *strcpy_P(char *, const char *);
1196:/usr/avr/include/avr/pgmspace.h **** 
1197:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1198:/usr/avr/include/avr/pgmspace.h ****     \fn int strcasecmp_P(const char *s1, const char *s2)
1199:/usr/avr/include/avr/pgmspace.h ****     \brief Compare two strings ignoring case.
1200:/usr/avr/include/avr/pgmspace.h **** 
1201:/usr/avr/include/avr/pgmspace.h ****     The strcasecmp_P() function compares the two strings \p s1 and \p s2,
1202:/usr/avr/include/avr/pgmspace.h ****     ignoring the case of the characters.
1203:/usr/avr/include/avr/pgmspace.h **** 
1204:/usr/avr/include/avr/pgmspace.h ****     \param s1 A pointer to a string in the devices SRAM.
1205:/usr/avr/include/avr/pgmspace.h ****     \param s2 A pointer to a string in the devices Flash.
1206:/usr/avr/include/avr/pgmspace.h **** 
1207:/usr/avr/include/avr/pgmspace.h ****     \returns The strcasecmp_P() function returns an integer less than,
1208:/usr/avr/include/avr/pgmspace.h ****     equal to, or greater than zero if \p s1 is found, respectively, to
1209:/usr/avr/include/avr/pgmspace.h ****     be less than, to match, or be greater than \p s2. A consequence of
1210:/usr/avr/include/avr/pgmspace.h ****     the ordering used by strcasecmp_P() is that if \p s1 is an initial
1211:/usr/avr/include/avr/pgmspace.h ****     substring of \p s2, then \p s1 is considered to be "less than" \p s2. */
1212:/usr/avr/include/avr/pgmspace.h **** extern int strcasecmp_P(const char *, const char *) __ATTR_PURE__;
1213:/usr/avr/include/avr/pgmspace.h **** 
1214:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1215:/usr/avr/include/avr/pgmspace.h ****     \fn char *strcasestr_P(const char *s1, const char *s2)
1216:/usr/avr/include/avr/pgmspace.h **** 
1217:/usr/avr/include/avr/pgmspace.h ****     This funtion is similar to strcasestr() except that \p s2 is pointer
1218:/usr/avr/include/avr/pgmspace.h ****     to a string in program space.	*/
1219:/usr/avr/include/avr/pgmspace.h **** extern char *strcasestr_P(const char *, const char *) __ATTR_PURE__;
1220:/usr/avr/include/avr/pgmspace.h **** 
1221:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1222:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strcspn_P(const char *s, const char *reject)
1223:/usr/avr/include/avr/pgmspace.h **** 
1224:/usr/avr/include/avr/pgmspace.h ****     The strcspn_P() function calculates the length of the initial segment
1225:/usr/avr/include/avr/pgmspace.h ****     of \p s which consists entirely of characters not in \p reject. This
1226:/usr/avr/include/avr/pgmspace.h ****     function is similar to strcspn() except that \p reject is a pointer
1227:/usr/avr/include/avr/pgmspace.h ****     to a string in program space.
1228:/usr/avr/include/avr/pgmspace.h **** 
1229:/usr/avr/include/avr/pgmspace.h ****     \return The strcspn_P() function returns the number of characters in
1230:/usr/avr/include/avr/pgmspace.h ****     the initial segment of \p s which are not in the string \p reject.
1231:/usr/avr/include/avr/pgmspace.h ****     The terminating zero is not considered as a part of string.	*/
1232:/usr/avr/include/avr/pgmspace.h **** extern size_t strcspn_P(const char *__s, const char * __reject) __ATTR_PURE__;
1233:/usr/avr/include/avr/pgmspace.h **** 
1234:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1235:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strlcat_P(char *dst, const char *src, size_t siz)
1236:/usr/avr/include/avr/pgmspace.h ****     \brief Concatenate two strings.
1237:/usr/avr/include/avr/pgmspace.h **** 
1238:/usr/avr/include/avr/pgmspace.h ****     The strlcat_P() function is similar to strlcat(), except that the \p src
1239:/usr/avr/include/avr/pgmspace.h ****     string must be located in program space (flash).
1240:/usr/avr/include/avr/pgmspace.h **** 
1241:/usr/avr/include/avr/pgmspace.h ****     Appends \p src to string \p dst of size \p siz (unlike strncat(),
1242:/usr/avr/include/avr/pgmspace.h ****     \p siz is the full size of \p dst, not space left).  At most \p siz-1
1243:/usr/avr/include/avr/pgmspace.h ****     characters will be copied.  Always NULL terminates (unless \p siz <=
1244:/usr/avr/include/avr/pgmspace.h ****     \p strlen(dst)).
1245:/usr/avr/include/avr/pgmspace.h **** 
1246:/usr/avr/include/avr/pgmspace.h ****     \returns The strlcat_P() function returns strlen(src) + MIN(siz,
1247:/usr/avr/include/avr/pgmspace.h ****     strlen(initial dst)).  If retval >= siz, truncation occurred.	*/
1248:/usr/avr/include/avr/pgmspace.h **** extern size_t strlcat_P (char *, const char *, size_t );
1249:/usr/avr/include/avr/pgmspace.h **** 
1250:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1251:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strlcpy_P(char *dst, const char *src, size_t siz)
1252:/usr/avr/include/avr/pgmspace.h ****     \brief Copy a string from progmem to RAM.
1253:/usr/avr/include/avr/pgmspace.h **** 
1254:/usr/avr/include/avr/pgmspace.h ****     Copy \p src to string \p dst of size \p siz.  At most \p siz-1
1255:/usr/avr/include/avr/pgmspace.h ****     characters will be copied.  Always NULL terminates (unless \p siz == 0).
1256:/usr/avr/include/avr/pgmspace.h ****     The strlcpy_P() function is similar to strlcpy() except that the
1257:/usr/avr/include/avr/pgmspace.h ****     \p src is pointer to a string in memory space.
1258:/usr/avr/include/avr/pgmspace.h **** 
1259:/usr/avr/include/avr/pgmspace.h ****     \returns The strlcpy_P() function returns strlen(src). If
1260:/usr/avr/include/avr/pgmspace.h ****     retval >= siz, truncation occurred.  */
1261:/usr/avr/include/avr/pgmspace.h **** extern size_t strlcpy_P (char *, const char *, size_t );
1262:/usr/avr/include/avr/pgmspace.h **** 
1263:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1264:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strnlen_P(const char *src, size_t len)
1265:/usr/avr/include/avr/pgmspace.h ****     \brief Determine the length of a fixed-size string.
1266:/usr/avr/include/avr/pgmspace.h **** 
1267:/usr/avr/include/avr/pgmspace.h ****     The strnlen_P() function is similar to strnlen(), except that \c src is a
1268:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1269:/usr/avr/include/avr/pgmspace.h **** 
1270:/usr/avr/include/avr/pgmspace.h ****     \returns The strnlen_P function returns strlen_P(src), if that is less than
1271:/usr/avr/include/avr/pgmspace.h ****     \c len, or \c len if there is no '\\0' character among the first \c len
1272:/usr/avr/include/avr/pgmspace.h ****     characters pointed to by \c src. */
1273:/usr/avr/include/avr/pgmspace.h **** extern size_t strnlen_P(const char *, size_t) __ATTR_CONST__; /* program memory can't change */
1274:/usr/avr/include/avr/pgmspace.h **** 
1275:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1276:/usr/avr/include/avr/pgmspace.h ****     \fn int strncmp_P(const char *s1, const char *s2, size_t n)
1277:/usr/avr/include/avr/pgmspace.h **** 
1278:/usr/avr/include/avr/pgmspace.h ****     The strncmp_P() function is similar to strcmp_P() except it only compares
1279:/usr/avr/include/avr/pgmspace.h ****     the first (at most) n characters of s1 and s2.
1280:/usr/avr/include/avr/pgmspace.h **** 
1281:/usr/avr/include/avr/pgmspace.h ****     \returns The strncmp_P() function returns an integer less than, equal to,
1282:/usr/avr/include/avr/pgmspace.h ****     or greater than zero if s1 (or the first n bytes thereof) is found,
1283:/usr/avr/include/avr/pgmspace.h ****     respectively, to be less than, to match, or be greater than s2.  */
1284:/usr/avr/include/avr/pgmspace.h **** extern int strncmp_P(const char *, const char *, size_t) __ATTR_PURE__;
1285:/usr/avr/include/avr/pgmspace.h **** 
1286:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1287:/usr/avr/include/avr/pgmspace.h ****     \fn int strncasecmp_P(const char *s1, const char *s2, size_t n)
1288:/usr/avr/include/avr/pgmspace.h ****     \brief Compare two strings ignoring case.
1289:/usr/avr/include/avr/pgmspace.h **** 
1290:/usr/avr/include/avr/pgmspace.h ****     The strncasecmp_P() function is similar to strcasecmp_P(), except it
1291:/usr/avr/include/avr/pgmspace.h ****     only compares the first \p n characters of \p s1.
1292:/usr/avr/include/avr/pgmspace.h **** 
1293:/usr/avr/include/avr/pgmspace.h ****     \param s1 A pointer to a string in the devices SRAM.
1294:/usr/avr/include/avr/pgmspace.h ****     \param s2 A pointer to a string in the devices Flash.
1295:/usr/avr/include/avr/pgmspace.h ****     \param n The maximum number of bytes to compare.
1296:/usr/avr/include/avr/pgmspace.h **** 
1297:/usr/avr/include/avr/pgmspace.h ****     \returns The strncasecmp_P() function returns an integer less than,
1298:/usr/avr/include/avr/pgmspace.h ****     equal to, or greater than zero if \p s1 (or the first \p n bytes
1299:/usr/avr/include/avr/pgmspace.h ****     thereof) is found, respectively, to be less than, to match, or be
1300:/usr/avr/include/avr/pgmspace.h ****     greater than \p s2. A consequence of the ordering used by
1301:/usr/avr/include/avr/pgmspace.h ****     strncasecmp_P() is that if \p s1 is an initial substring of \p s2,
1302:/usr/avr/include/avr/pgmspace.h ****     then \p s1 is considered to be "less than" \p s2.  */
1303:/usr/avr/include/avr/pgmspace.h **** extern int strncasecmp_P(const char *, const char *, size_t) __ATTR_PURE__;
1304:/usr/avr/include/avr/pgmspace.h **** 
1305:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1306:/usr/avr/include/avr/pgmspace.h ****     \fn char *strncat_P(char *dest, const char *src, size_t len)
1307:/usr/avr/include/avr/pgmspace.h ****     \brief Concatenate two strings.
1308:/usr/avr/include/avr/pgmspace.h **** 
1309:/usr/avr/include/avr/pgmspace.h ****     The strncat_P() function is similar to strncat(), except that the \e src
1310:/usr/avr/include/avr/pgmspace.h ****     string must be located in program space (flash).
1311:/usr/avr/include/avr/pgmspace.h **** 
1312:/usr/avr/include/avr/pgmspace.h ****     \returns The strncat_P() function returns a pointer to the resulting string
1313:/usr/avr/include/avr/pgmspace.h ****     dest.  */
1314:/usr/avr/include/avr/pgmspace.h **** extern char *strncat_P(char *, const char *, size_t);
1315:/usr/avr/include/avr/pgmspace.h **** 
1316:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1317:/usr/avr/include/avr/pgmspace.h ****     \fn char *strncpy_P(char *dest, const char *src, size_t n)
1318:/usr/avr/include/avr/pgmspace.h **** 
1319:/usr/avr/include/avr/pgmspace.h ****     The strncpy_P() function is similar to strcpy_P() except that not more
1320:/usr/avr/include/avr/pgmspace.h ****     than n bytes of src are copied.  Thus, if there is no null byte among the
1321:/usr/avr/include/avr/pgmspace.h ****     first n bytes of src, the result will not be null-terminated.
1322:/usr/avr/include/avr/pgmspace.h **** 
1323:/usr/avr/include/avr/pgmspace.h ****     In the case where the length of src is less than that of n, the remainder
1324:/usr/avr/include/avr/pgmspace.h ****     of dest will be padded with nulls.
1325:/usr/avr/include/avr/pgmspace.h **** 
1326:/usr/avr/include/avr/pgmspace.h ****     \returns The strncpy_P() function returns a pointer to the destination
1327:/usr/avr/include/avr/pgmspace.h ****     string dest.  */
1328:/usr/avr/include/avr/pgmspace.h **** extern char *strncpy_P(char *, const char *, size_t);
1329:/usr/avr/include/avr/pgmspace.h **** 
1330:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1331:/usr/avr/include/avr/pgmspace.h ****     \fn char *strpbrk_P(const char *s, const char *accept)
1332:/usr/avr/include/avr/pgmspace.h **** 
1333:/usr/avr/include/avr/pgmspace.h ****     The strpbrk_P() function locates the first occurrence in the string
1334:/usr/avr/include/avr/pgmspace.h ****     \p s of any of the characters in the flash string \p accept. This
1335:/usr/avr/include/avr/pgmspace.h ****     function is similar to strpbrk() except that \p accept is a pointer
1336:/usr/avr/include/avr/pgmspace.h ****     to a string in program space.
1337:/usr/avr/include/avr/pgmspace.h **** 
1338:/usr/avr/include/avr/pgmspace.h ****     \return  The strpbrk_P() function returns a pointer to the character
1339:/usr/avr/include/avr/pgmspace.h ****     in \p s that matches one of the characters in \p accept, or \c NULL
1340:/usr/avr/include/avr/pgmspace.h ****     if no such character is found. The terminating zero is not considered
1341:/usr/avr/include/avr/pgmspace.h ****     as a part of string: if one or both args are empty, the result will
1342:/usr/avr/include/avr/pgmspace.h ****     \c NULL. */
1343:/usr/avr/include/avr/pgmspace.h **** extern char *strpbrk_P(const char *__s, const char * __accept) __ATTR_PURE__;
1344:/usr/avr/include/avr/pgmspace.h **** 
1345:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1346:/usr/avr/include/avr/pgmspace.h ****     \fn const char *strrchr_P(const char *s, int val)
1347:/usr/avr/include/avr/pgmspace.h ****     \brief Locate character in string.
1348:/usr/avr/include/avr/pgmspace.h **** 
1349:/usr/avr/include/avr/pgmspace.h ****     The strrchr_P() function returns a pointer to the last occurrence of
1350:/usr/avr/include/avr/pgmspace.h ****     the character \p val in the flash string \p s.
1351:/usr/avr/include/avr/pgmspace.h **** 
1352:/usr/avr/include/avr/pgmspace.h ****     \return The strrchr_P() function returns a pointer to the matched
1353:/usr/avr/include/avr/pgmspace.h ****     character or \c NULL if the character is not found. */
1354:/usr/avr/include/avr/pgmspace.h **** extern const char * strrchr_P(const char *, int __val) __ATTR_CONST__;
1355:/usr/avr/include/avr/pgmspace.h **** 
1356:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1357:/usr/avr/include/avr/pgmspace.h ****     \fn char *strsep_P(char **sp, const char *delim)
1358:/usr/avr/include/avr/pgmspace.h ****     \brief Parse a string into tokens.
1359:/usr/avr/include/avr/pgmspace.h **** 
1360:/usr/avr/include/avr/pgmspace.h ****     The strsep_P() function locates, in the string referenced by \p *sp,
1361:/usr/avr/include/avr/pgmspace.h ****     the first occurrence of any character in the string \p delim (or the
1362:/usr/avr/include/avr/pgmspace.h ****     terminating '\\0' character) and replaces it with a '\\0'.  The
1363:/usr/avr/include/avr/pgmspace.h ****     location of the next character after the delimiter character (or \c
1364:/usr/avr/include/avr/pgmspace.h ****     NULL, if the end of the string was reached) is stored in \p *sp. An
1365:/usr/avr/include/avr/pgmspace.h ****     ``empty'' field, i.e. one caused by two adjacent delimiter
1366:/usr/avr/include/avr/pgmspace.h ****     characters, can be detected by comparing the location referenced by
1367:/usr/avr/include/avr/pgmspace.h ****     the pointer returned in \p *sp to '\\0'. This function is similar to
1368:/usr/avr/include/avr/pgmspace.h ****     strsep() except that \p delim is a pointer to a string in program
1369:/usr/avr/include/avr/pgmspace.h ****     space.
1370:/usr/avr/include/avr/pgmspace.h **** 
1371:/usr/avr/include/avr/pgmspace.h ****     \return The strsep_P() function returns a pointer to the original
1372:/usr/avr/include/avr/pgmspace.h ****     value of \p *sp. If \p *sp is initially \c NULL, strsep_P() returns
1373:/usr/avr/include/avr/pgmspace.h ****     \c NULL. */
1374:/usr/avr/include/avr/pgmspace.h **** extern char *strsep_P(char **__sp, const char * __delim);
1375:/usr/avr/include/avr/pgmspace.h **** 
1376:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1377:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strspn_P(const char *s, const char *accept)
1378:/usr/avr/include/avr/pgmspace.h **** 
1379:/usr/avr/include/avr/pgmspace.h ****     The strspn_P() function calculates the length of the initial segment
1380:/usr/avr/include/avr/pgmspace.h ****     of \p s which consists entirely of characters in \p accept. This
1381:/usr/avr/include/avr/pgmspace.h ****     function is similar to strspn() except that \p accept is a pointer
1382:/usr/avr/include/avr/pgmspace.h ****     to a string in program space.
1383:/usr/avr/include/avr/pgmspace.h **** 
1384:/usr/avr/include/avr/pgmspace.h ****     \return  The strspn_P() function returns the number of characters in
1385:/usr/avr/include/avr/pgmspace.h ****     the initial segment of \p s which consist only of characters from \p
1386:/usr/avr/include/avr/pgmspace.h ****     accept. The terminating zero is not considered as a part of string.	*/
1387:/usr/avr/include/avr/pgmspace.h **** extern size_t strspn_P(const char *__s, const char * __accept) __ATTR_PURE__;
1388:/usr/avr/include/avr/pgmspace.h **** 
1389:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1390:/usr/avr/include/avr/pgmspace.h ****     \fn char *strstr_P(const char *s1, const char *s2)
1391:/usr/avr/include/avr/pgmspace.h ****     \brief Locate a substring.
1392:/usr/avr/include/avr/pgmspace.h **** 
1393:/usr/avr/include/avr/pgmspace.h ****     The strstr_P() function finds the first occurrence of the substring
1394:/usr/avr/include/avr/pgmspace.h ****     \p s2 in the string \p s1.  The terminating '\\0' characters are not
1395:/usr/avr/include/avr/pgmspace.h ****     compared. The strstr_P() function is similar to strstr() except that
1396:/usr/avr/include/avr/pgmspace.h ****     \p s2 is pointer to a string in program space.
1397:/usr/avr/include/avr/pgmspace.h **** 
1398:/usr/avr/include/avr/pgmspace.h ****     \returns The strstr_P() function returns a pointer to the beginning
1399:/usr/avr/include/avr/pgmspace.h ****     of the substring, or NULL if the substring is not found. If \p s2
1400:/usr/avr/include/avr/pgmspace.h ****     points to a string of zero length, the function returns \p s1. */
1401:/usr/avr/include/avr/pgmspace.h **** extern char *strstr_P(const char *, const char *) __ATTR_PURE__;
1402:/usr/avr/include/avr/pgmspace.h **** 
1403:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1404:/usr/avr/include/avr/pgmspace.h ****     \fn char *strtok_P(char *s, const char * delim)
1405:/usr/avr/include/avr/pgmspace.h ****     \brief Parses the string into tokens.
1406:/usr/avr/include/avr/pgmspace.h **** 
1407:/usr/avr/include/avr/pgmspace.h ****     strtok_P() parses the string \p s into tokens. The first call to
1408:/usr/avr/include/avr/pgmspace.h ****     strtok_P() should have \p s as its first argument. Subsequent calls
1409:/usr/avr/include/avr/pgmspace.h ****     should have the first argument set to NULL. If a token ends with a
1410:/usr/avr/include/avr/pgmspace.h ****     delimiter, this delimiting character is overwritten with a '\\0' and a
1411:/usr/avr/include/avr/pgmspace.h ****     pointer to the next character is saved for the next call to strtok_P().
1412:/usr/avr/include/avr/pgmspace.h ****     The delimiter string \p delim may be different for each call.
1413:/usr/avr/include/avr/pgmspace.h **** 
1414:/usr/avr/include/avr/pgmspace.h ****     The strtok_P() function is similar to strtok() except that \p delim
1415:/usr/avr/include/avr/pgmspace.h ****     is pointer to a string in program space.
1416:/usr/avr/include/avr/pgmspace.h **** 
1417:/usr/avr/include/avr/pgmspace.h ****     \returns The strtok_P() function returns a pointer to the next token or
1418:/usr/avr/include/avr/pgmspace.h ****     NULL when no more tokens are found.
1419:/usr/avr/include/avr/pgmspace.h **** 
1420:/usr/avr/include/avr/pgmspace.h ****     \note strtok_P() is NOT reentrant. For a reentrant version of this
1421:/usr/avr/include/avr/pgmspace.h ****     function see strtok_rP().
1422:/usr/avr/include/avr/pgmspace.h ****  */
1423:/usr/avr/include/avr/pgmspace.h **** extern char *strtok_P(char *__s, const char * __delim);
1424:/usr/avr/include/avr/pgmspace.h **** 
1425:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1426:/usr/avr/include/avr/pgmspace.h ****     \fn char *strtok_rP (char *string, const char *delim, char **last)
1427:/usr/avr/include/avr/pgmspace.h ****     \brief Parses string into tokens.
1428:/usr/avr/include/avr/pgmspace.h **** 
1429:/usr/avr/include/avr/pgmspace.h ****     The strtok_rP() function parses \p string into tokens. The first call to
1430:/usr/avr/include/avr/pgmspace.h ****     strtok_rP() should have string as its first argument. Subsequent calls
1431:/usr/avr/include/avr/pgmspace.h ****     should have the first argument set to NULL. If a token ends with a
1432:/usr/avr/include/avr/pgmspace.h ****     delimiter, this delimiting character is overwritten with a '\\0' and a
1433:/usr/avr/include/avr/pgmspace.h ****     pointer to the next character is saved for the next call to strtok_rP().
1434:/usr/avr/include/avr/pgmspace.h ****     The delimiter string \p delim may be different for each call. \p last is
1435:/usr/avr/include/avr/pgmspace.h ****     a user allocated char* pointer. It must be the same while parsing the
1436:/usr/avr/include/avr/pgmspace.h ****     same string. strtok_rP() is a reentrant version of strtok_P().
1437:/usr/avr/include/avr/pgmspace.h **** 
1438:/usr/avr/include/avr/pgmspace.h ****     The strtok_rP() function is similar to strtok_r() except that \p delim
1439:/usr/avr/include/avr/pgmspace.h ****     is pointer to a string in program space.
1440:/usr/avr/include/avr/pgmspace.h **** 
1441:/usr/avr/include/avr/pgmspace.h ****     \returns The strtok_rP() function returns a pointer to the next token or
1442:/usr/avr/include/avr/pgmspace.h ****     NULL when no more tokens are found. */
1443:/usr/avr/include/avr/pgmspace.h **** extern char *strtok_rP(char *__s, const char * __delim, char **__last);
1444:/usr/avr/include/avr/pgmspace.h **** 
1445:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1446:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strlen_PF(uint_farptr_t s)
1447:/usr/avr/include/avr/pgmspace.h ****     \brief Obtain the length of a string
1448:/usr/avr/include/avr/pgmspace.h **** 
1449:/usr/avr/include/avr/pgmspace.h ****     The strlen_PF() function is similar to strlen(), except that \e s is a
1450:/usr/avr/include/avr/pgmspace.h ****     far pointer to a string in program space.
1451:/usr/avr/include/avr/pgmspace.h **** 
1452:/usr/avr/include/avr/pgmspace.h ****     \param s A far pointer to the string in flash
1453:/usr/avr/include/avr/pgmspace.h **** 
1454:/usr/avr/include/avr/pgmspace.h ****     \returns The strlen_PF() function returns the number of characters in
1455:/usr/avr/include/avr/pgmspace.h ****     \e s. The contents of RAMPZ SFR are undefined when the function returns. */
1456:/usr/avr/include/avr/pgmspace.h **** extern size_t strlen_PF(uint_farptr_t src) __ATTR_CONST__; /* program memory can't change */
1457:/usr/avr/include/avr/pgmspace.h **** 
1458:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1459:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strnlen_PF(uint_farptr_t s, size_t len)
1460:/usr/avr/include/avr/pgmspace.h ****     \brief Determine the length of a fixed-size string
1461:/usr/avr/include/avr/pgmspace.h **** 
1462:/usr/avr/include/avr/pgmspace.h ****     The strnlen_PF() function is similar to strnlen(), except that \e s is a
1463:/usr/avr/include/avr/pgmspace.h ****     far pointer to a string in program space.
1464:/usr/avr/include/avr/pgmspace.h **** 
1465:/usr/avr/include/avr/pgmspace.h ****     \param s A far pointer to the string in Flash
1466:/usr/avr/include/avr/pgmspace.h ****     \param len The maximum number of length to return
1467:/usr/avr/include/avr/pgmspace.h **** 
1468:/usr/avr/include/avr/pgmspace.h ****     \returns The strnlen_PF function returns strlen_P(\e s), if that is less
1469:/usr/avr/include/avr/pgmspace.h ****     than \e len, or \e len if there is no '\\0' character among the first \e
1470:/usr/avr/include/avr/pgmspace.h ****     len characters pointed to by \e s. The contents of RAMPZ SFR are
1471:/usr/avr/include/avr/pgmspace.h ****     undefined when the function returns. */
1472:/usr/avr/include/avr/pgmspace.h **** extern size_t strnlen_PF(uint_farptr_t src, size_t len) __ATTR_CONST__; /* program memory can't cha
1473:/usr/avr/include/avr/pgmspace.h **** 
1474:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1475:/usr/avr/include/avr/pgmspace.h ****     \fn void *memcpy_PF(void *dest, uint_farptr_t src, size_t n)
1476:/usr/avr/include/avr/pgmspace.h ****     \brief Copy a memory block from flash to SRAM
1477:/usr/avr/include/avr/pgmspace.h **** 
1478:/usr/avr/include/avr/pgmspace.h ****     The memcpy_PF() function is similar to memcpy(), except the data
1479:/usr/avr/include/avr/pgmspace.h ****     is copied from the program space and is addressed using a far pointer.
1480:/usr/avr/include/avr/pgmspace.h **** 
1481:/usr/avr/include/avr/pgmspace.h ****     \param dest A pointer to the destination buffer
1482:/usr/avr/include/avr/pgmspace.h ****     \param src A far pointer to the origin of data in flash memory
1483:/usr/avr/include/avr/pgmspace.h ****     \param n The number of bytes to be copied
1484:/usr/avr/include/avr/pgmspace.h **** 
1485:/usr/avr/include/avr/pgmspace.h ****     \returns The memcpy_PF() function returns a pointer to \e dst. The contents
1486:/usr/avr/include/avr/pgmspace.h ****     of RAMPZ SFR are undefined when the function returns. */
1487:/usr/avr/include/avr/pgmspace.h **** extern void *memcpy_PF(void *dest, uint_farptr_t src, size_t len);
1488:/usr/avr/include/avr/pgmspace.h **** 
1489:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1490:/usr/avr/include/avr/pgmspace.h ****     \fn char *strcpy_PF(char *dst, uint_farptr_t src)
1491:/usr/avr/include/avr/pgmspace.h ****     \brief Duplicate a string
1492:/usr/avr/include/avr/pgmspace.h **** 
1493:/usr/avr/include/avr/pgmspace.h ****     The strcpy_PF() function is similar to strcpy() except that \e src is a far
1494:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1495:/usr/avr/include/avr/pgmspace.h **** 
1496:/usr/avr/include/avr/pgmspace.h ****     \param dst A pointer to the destination string in SRAM
1497:/usr/avr/include/avr/pgmspace.h ****     \param src A far pointer to the source string in Flash
1498:/usr/avr/include/avr/pgmspace.h **** 
1499:/usr/avr/include/avr/pgmspace.h ****     \returns The strcpy_PF() function returns a pointer to the destination
1500:/usr/avr/include/avr/pgmspace.h ****     string \e dst. The contents of RAMPZ SFR are undefined when the funcion
1501:/usr/avr/include/avr/pgmspace.h ****     returns. */
1502:/usr/avr/include/avr/pgmspace.h **** extern char *strcpy_PF(char *dest, uint_farptr_t src);
1503:/usr/avr/include/avr/pgmspace.h **** 
1504:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1505:/usr/avr/include/avr/pgmspace.h ****     \fn char *strncpy_PF(char *dst, uint_farptr_t src, size_t n)
1506:/usr/avr/include/avr/pgmspace.h ****     \brief Duplicate a string until a limited length
1507:/usr/avr/include/avr/pgmspace.h **** 
1508:/usr/avr/include/avr/pgmspace.h ****     The strncpy_PF() function is similar to strcpy_PF() except that not more
1509:/usr/avr/include/avr/pgmspace.h ****     than \e n bytes of \e src are copied.  Thus, if there is no null byte among
1510:/usr/avr/include/avr/pgmspace.h ****     the first \e n bytes of \e src, the result will not be null-terminated.
1511:/usr/avr/include/avr/pgmspace.h **** 
1512:/usr/avr/include/avr/pgmspace.h ****     In the case where the length of \e src is less than that of \e n, the
1513:/usr/avr/include/avr/pgmspace.h ****     remainder of \e dst will be padded with nulls.
1514:/usr/avr/include/avr/pgmspace.h **** 
1515:/usr/avr/include/avr/pgmspace.h ****     \param dst A pointer to the destination string in SRAM
1516:/usr/avr/include/avr/pgmspace.h ****     \param src A far pointer to the source string in Flash
1517:/usr/avr/include/avr/pgmspace.h ****     \param n The maximum number of bytes to copy
1518:/usr/avr/include/avr/pgmspace.h **** 
1519:/usr/avr/include/avr/pgmspace.h ****     \returns The strncpy_PF() function returns a pointer to the destination
1520:/usr/avr/include/avr/pgmspace.h ****     string \e dst. The contents of RAMPZ SFR are undefined when the function
1521:/usr/avr/include/avr/pgmspace.h ****     returns. */
1522:/usr/avr/include/avr/pgmspace.h **** extern char *strncpy_PF(char *dest, uint_farptr_t src, size_t len);
1523:/usr/avr/include/avr/pgmspace.h **** 
1524:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1525:/usr/avr/include/avr/pgmspace.h ****     \fn char *strcat_PF(char *dst, uint_farptr_t src)
1526:/usr/avr/include/avr/pgmspace.h ****     \brief Concatenates two strings
1527:/usr/avr/include/avr/pgmspace.h **** 
1528:/usr/avr/include/avr/pgmspace.h ****     The strcat_PF() function is similar to strcat() except that the \e src
1529:/usr/avr/include/avr/pgmspace.h ****     string must be located in program space (flash) and is addressed using
1530:/usr/avr/include/avr/pgmspace.h ****     a far pointer
1531:/usr/avr/include/avr/pgmspace.h **** 
1532:/usr/avr/include/avr/pgmspace.h ****     \param dst A pointer to the destination string in SRAM
1533:/usr/avr/include/avr/pgmspace.h ****     \param src A far pointer to the string to be appended in Flash
1534:/usr/avr/include/avr/pgmspace.h **** 
1535:/usr/avr/include/avr/pgmspace.h ****     \returns The strcat_PF() function returns a pointer to the resulting
1536:/usr/avr/include/avr/pgmspace.h ****     string \e dst. The contents of RAMPZ SFR are undefined when the function
1537:/usr/avr/include/avr/pgmspace.h ****     returns */
1538:/usr/avr/include/avr/pgmspace.h **** extern char *strcat_PF(char *dest, uint_farptr_t src);
1539:/usr/avr/include/avr/pgmspace.h **** 
1540:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1541:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strlcat_PF(char *dst, uint_farptr_t src, size_t n)
1542:/usr/avr/include/avr/pgmspace.h ****     \brief Concatenate two strings
1543:/usr/avr/include/avr/pgmspace.h **** 
1544:/usr/avr/include/avr/pgmspace.h ****     The strlcat_PF() function is similar to strlcat(), except that the \e src
1545:/usr/avr/include/avr/pgmspace.h ****     string must be located in program space (flash) and is addressed using
1546:/usr/avr/include/avr/pgmspace.h ****     a far pointer.
1547:/usr/avr/include/avr/pgmspace.h **** 
1548:/usr/avr/include/avr/pgmspace.h ****     Appends src to string dst of size \e n (unlike strncat(), \e n is the
1549:/usr/avr/include/avr/pgmspace.h ****     full size of \e dst, not space left).  At most \e n-1 characters
1550:/usr/avr/include/avr/pgmspace.h ****     will be copied.  Always NULL terminates (unless \e n <= strlen(\e dst)).
1551:/usr/avr/include/avr/pgmspace.h **** 
1552:/usr/avr/include/avr/pgmspace.h ****     \param dst A pointer to the destination string in SRAM
1553:/usr/avr/include/avr/pgmspace.h ****     \param src A far pointer to the source string in Flash
1554:/usr/avr/include/avr/pgmspace.h ****     \param n The total number of bytes allocated to the destination string
1555:/usr/avr/include/avr/pgmspace.h **** 
1556:/usr/avr/include/avr/pgmspace.h ****     \returns The strlcat_PF() function returns strlen(\e src) + MIN(\e n,
1557:/usr/avr/include/avr/pgmspace.h ****     strlen(initial \e dst)).  If retval >= \e n, truncation occurred. The
1558:/usr/avr/include/avr/pgmspace.h ****     contents of RAMPZ SFR are undefined when the funcion returns. */
1559:/usr/avr/include/avr/pgmspace.h **** extern size_t strlcat_PF(char *dst, uint_farptr_t src, size_t siz);
1560:/usr/avr/include/avr/pgmspace.h **** 
1561:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1562:/usr/avr/include/avr/pgmspace.h ****     \fn char *strncat_PF(char *dst, uint_farptr_t src, size_t n)
1563:/usr/avr/include/avr/pgmspace.h ****     \brief Concatenate two strings
1564:/usr/avr/include/avr/pgmspace.h **** 
1565:/usr/avr/include/avr/pgmspace.h ****     The strncat_PF() function is similar to strncat(), except that the \e src
1566:/usr/avr/include/avr/pgmspace.h ****     string must be located in program space (flash) and is addressed using a
1567:/usr/avr/include/avr/pgmspace.h ****     far pointer.
1568:/usr/avr/include/avr/pgmspace.h **** 
1569:/usr/avr/include/avr/pgmspace.h ****     \param dst A pointer to the destination string in SRAM
1570:/usr/avr/include/avr/pgmspace.h ****     \param src A far pointer to the source string in Flash
1571:/usr/avr/include/avr/pgmspace.h ****     \param n The maximum number of bytes to append
1572:/usr/avr/include/avr/pgmspace.h **** 
1573:/usr/avr/include/avr/pgmspace.h ****     \returns The strncat_PF() function returns a pointer to the resulting
1574:/usr/avr/include/avr/pgmspace.h ****     string \e dst. The contents of RAMPZ SFR are undefined when the function
1575:/usr/avr/include/avr/pgmspace.h ****     returns. */
1576:/usr/avr/include/avr/pgmspace.h **** extern char *strncat_PF(char *dest, uint_farptr_t src, size_t len);
1577:/usr/avr/include/avr/pgmspace.h **** 
1578:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1579:/usr/avr/include/avr/pgmspace.h ****     \fn int strcmp_PF(const char *s1, uint_farptr_t s2)
1580:/usr/avr/include/avr/pgmspace.h ****     \brief Compares two strings
1581:/usr/avr/include/avr/pgmspace.h **** 
1582:/usr/avr/include/avr/pgmspace.h ****     The strcmp_PF() function is similar to strcmp() except that \e s2 is a far
1583:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1584:/usr/avr/include/avr/pgmspace.h **** 
1585:/usr/avr/include/avr/pgmspace.h ****     \param s1 A pointer to the first string in SRAM
1586:/usr/avr/include/avr/pgmspace.h ****     \param s2 A far pointer to the second string in Flash
1587:/usr/avr/include/avr/pgmspace.h **** 
1588:/usr/avr/include/avr/pgmspace.h ****     \returns The strcmp_PF() function returns an integer less than, equal to,
1589:/usr/avr/include/avr/pgmspace.h ****     or greater than zero if \e s1 is found, respectively, to be less than, to
1590:/usr/avr/include/avr/pgmspace.h ****     match, or be greater than \e s2. The contents of RAMPZ SFR are undefined
1591:/usr/avr/include/avr/pgmspace.h ****     when the function returns. */
1592:/usr/avr/include/avr/pgmspace.h **** extern int strcmp_PF(const char *s1, uint_farptr_t s2) __ATTR_PURE__;
1593:/usr/avr/include/avr/pgmspace.h **** 
1594:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1595:/usr/avr/include/avr/pgmspace.h ****     \fn int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n)
1596:/usr/avr/include/avr/pgmspace.h ****     \brief Compare two strings with limited length
1597:/usr/avr/include/avr/pgmspace.h **** 
1598:/usr/avr/include/avr/pgmspace.h ****     The strncmp_PF() function is similar to strcmp_PF() except it only
1599:/usr/avr/include/avr/pgmspace.h ****     compares the first (at most) \e n characters of \e s1 and \e s2.
1600:/usr/avr/include/avr/pgmspace.h **** 
1601:/usr/avr/include/avr/pgmspace.h ****     \param s1 A pointer to the first string in SRAM
1602:/usr/avr/include/avr/pgmspace.h ****     \param s2 A far pointer to the second string in Flash
1603:/usr/avr/include/avr/pgmspace.h ****     \param n The maximum number of bytes to compare
1604:/usr/avr/include/avr/pgmspace.h **** 
1605:/usr/avr/include/avr/pgmspace.h ****     \returns The strncmp_PF() function returns an integer less than, equal
1606:/usr/avr/include/avr/pgmspace.h ****     to, or greater than zero if \e s1 (or the first \e n bytes thereof) is found,
1607:/usr/avr/include/avr/pgmspace.h ****     respectively, to be less than, to match, or be greater than \e s2. The
1608:/usr/avr/include/avr/pgmspace.h ****     contents of RAMPZ SFR are undefined when the function returns. */
1609:/usr/avr/include/avr/pgmspace.h **** extern int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) __ATTR_PURE__;
1610:/usr/avr/include/avr/pgmspace.h **** 
1611:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1612:/usr/avr/include/avr/pgmspace.h ****     \fn int strcasecmp_PF(const char *s1, uint_farptr_t s2)
1613:/usr/avr/include/avr/pgmspace.h ****     \brief Compare two strings ignoring case
1614:/usr/avr/include/avr/pgmspace.h **** 
1615:/usr/avr/include/avr/pgmspace.h ****     The strcasecmp_PF() function compares the two strings \e s1 and \e s2, ignoring
1616:/usr/avr/include/avr/pgmspace.h ****     the case of the characters.
1617:/usr/avr/include/avr/pgmspace.h **** 
1618:/usr/avr/include/avr/pgmspace.h ****     \param s1 A pointer to the first string in SRAM
1619:/usr/avr/include/avr/pgmspace.h ****     \param s2 A far pointer to the second string in Flash
1620:/usr/avr/include/avr/pgmspace.h **** 
1621:/usr/avr/include/avr/pgmspace.h ****     \returns The strcasecmp_PF() function returns an integer less than, equal
1622:/usr/avr/include/avr/pgmspace.h ****     to, or greater than zero if \e s1 is found, respectively, to be less than, to
1623:/usr/avr/include/avr/pgmspace.h ****     match, or be greater than \e s2. The contents of RAMPZ SFR are undefined
1624:/usr/avr/include/avr/pgmspace.h ****     when the function returns. */
1625:/usr/avr/include/avr/pgmspace.h **** extern int strcasecmp_PF(const char *s1, uint_farptr_t s2) __ATTR_PURE__;
1626:/usr/avr/include/avr/pgmspace.h **** 
1627:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1628:/usr/avr/include/avr/pgmspace.h ****     \fn int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n)
1629:/usr/avr/include/avr/pgmspace.h ****     \brief Compare two strings ignoring case
1630:/usr/avr/include/avr/pgmspace.h **** 
1631:/usr/avr/include/avr/pgmspace.h ****     The strncasecmp_PF() function is similar to strcasecmp_PF(), except it
1632:/usr/avr/include/avr/pgmspace.h ****     only compares the first \e n characters of \e s1 and the string in flash is
1633:/usr/avr/include/avr/pgmspace.h ****     addressed using a far pointer.
1634:/usr/avr/include/avr/pgmspace.h **** 
1635:/usr/avr/include/avr/pgmspace.h ****     \param s1 A pointer to a string in SRAM
1636:/usr/avr/include/avr/pgmspace.h ****     \param s2 A far pointer to a string in Flash
1637:/usr/avr/include/avr/pgmspace.h ****     \param n The maximum number of bytes to compare
1638:/usr/avr/include/avr/pgmspace.h **** 
1639:/usr/avr/include/avr/pgmspace.h ****     \returns The strncasecmp_PF() function returns an integer less than, equal
1640:/usr/avr/include/avr/pgmspace.h ****     to, or greater than zero if \e s1 (or the first \e n bytes thereof) is found,
1641:/usr/avr/include/avr/pgmspace.h ****     respectively, to be less than, to match, or be greater than \e s2. The
1642:/usr/avr/include/avr/pgmspace.h ****     contents of RAMPZ SFR are undefined when the function returns.  */
1643:/usr/avr/include/avr/pgmspace.h **** extern int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) __ATTR_PURE__;
1644:/usr/avr/include/avr/pgmspace.h **** 
1645:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1646:/usr/avr/include/avr/pgmspace.h ****     \fn char *strstr_PF(const char *s1, uint_farptr_t s2)
1647:/usr/avr/include/avr/pgmspace.h ****     \brief Locate a substring.
1648:/usr/avr/include/avr/pgmspace.h **** 
1649:/usr/avr/include/avr/pgmspace.h ****     The strstr_PF() function finds the first occurrence of the substring \c s2
1650:/usr/avr/include/avr/pgmspace.h ****     in the string \c s1.  The terminating '\\0' characters are not
1651:/usr/avr/include/avr/pgmspace.h ****     compared.
1652:/usr/avr/include/avr/pgmspace.h ****     The strstr_PF() function is similar to strstr() except that \c s2 is a
1653:/usr/avr/include/avr/pgmspace.h ****     far pointer to a string in program space.
1654:/usr/avr/include/avr/pgmspace.h **** 
1655:/usr/avr/include/avr/pgmspace.h ****     \returns The strstr_PF() function returns a pointer to the beginning of the
1656:/usr/avr/include/avr/pgmspace.h ****     substring, or NULL if the substring is not found.
1657:/usr/avr/include/avr/pgmspace.h ****     If \c s2 points to a string of zero length, the function returns \c s1. The
1658:/usr/avr/include/avr/pgmspace.h ****     contents of RAMPZ SFR are undefined when the function returns. */
1659:/usr/avr/include/avr/pgmspace.h **** extern char *strstr_PF(const char *s1, uint_farptr_t s2);
1660:/usr/avr/include/avr/pgmspace.h **** 
1661:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1662:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz)
1663:/usr/avr/include/avr/pgmspace.h ****     \brief Copy a string from progmem to RAM.
1664:/usr/avr/include/avr/pgmspace.h **** 
1665:/usr/avr/include/avr/pgmspace.h ****     Copy src to string dst of size siz.  At most siz-1 characters will be
1666:/usr/avr/include/avr/pgmspace.h ****     copied. Always NULL terminates (unless siz == 0).
1667:/usr/avr/include/avr/pgmspace.h **** 
1668:/usr/avr/include/avr/pgmspace.h ****     \returns The strlcpy_PF() function returns strlen(src). If retval >= siz,
1669:/usr/avr/include/avr/pgmspace.h ****     truncation occurred.  The contents of RAMPZ SFR are undefined when the
1670:/usr/avr/include/avr/pgmspace.h ****     function returns. */
1671:/usr/avr/include/avr/pgmspace.h **** extern size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz);
1672:/usr/avr/include/avr/pgmspace.h **** 
1673:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1674:/usr/avr/include/avr/pgmspace.h ****     \fn int memcmp_PF(const void *s1, uint_farptr_t s2, size_t len)
1675:/usr/avr/include/avr/pgmspace.h ****     \brief Compare memory areas
1676:/usr/avr/include/avr/pgmspace.h **** 
1677:/usr/avr/include/avr/pgmspace.h ****     The memcmp_PF() function compares the first \p len bytes of the memory
1678:/usr/avr/include/avr/pgmspace.h ****     areas \p s1 and flash \p s2. The comparision is performed using unsigned
1679:/usr/avr/include/avr/pgmspace.h ****     char operations. It is an equivalent of memcmp_P() function, except
1680:/usr/avr/include/avr/pgmspace.h ****     that it is capable working on all FLASH including the exteded area
1681:/usr/avr/include/avr/pgmspace.h ****     above 64kB.
1682:/usr/avr/include/avr/pgmspace.h **** 
1683:/usr/avr/include/avr/pgmspace.h ****     \returns The memcmp_PF() function returns an integer less than, equal
1684:/usr/avr/include/avr/pgmspace.h ****     to, or greater than zero if the first \p len bytes of \p s1 is found,
1685:/usr/avr/include/avr/pgmspace.h ****     respectively, to be less than, to match, or be greater than the first
1686:/usr/avr/include/avr/pgmspace.h ****     \p len bytes of \p s2.  */
1687:/usr/avr/include/avr/pgmspace.h **** extern int memcmp_PF(const void *, uint_farptr_t, size_t) __ATTR_PURE__;
1688:/usr/avr/include/avr/pgmspace.h **** 
1689:/usr/avr/include/avr/pgmspace.h **** #ifdef __DOXYGEN__
1690:/usr/avr/include/avr/pgmspace.h **** /** \ingroup avr_pgmspace
1691:/usr/avr/include/avr/pgmspace.h ****     \fn size_t strlen_P(const char *src)
1692:/usr/avr/include/avr/pgmspace.h **** 
1693:/usr/avr/include/avr/pgmspace.h ****     The strlen_P() function is similar to strlen(), except that src is a
1694:/usr/avr/include/avr/pgmspace.h ****     pointer to a string in program space.
1695:/usr/avr/include/avr/pgmspace.h **** 
1696:/usr/avr/include/avr/pgmspace.h ****     \returns The strlen_P() function returns the number of characters in src.
1697:/usr/avr/include/avr/pgmspace.h **** 
1698:/usr/avr/include/avr/pgmspace.h ****     \note strlen_P() is implemented as an inline function in the avr/pgmspace.h
1699:/usr/avr/include/avr/pgmspace.h ****     header file, which will check if the length of the string is a constant
1700:/usr/avr/include/avr/pgmspace.h ****     and known at compile time. If it is not known at compile time, the macro
1701:/usr/avr/include/avr/pgmspace.h ****     will issue a call to __strlen_P() which will then calculate the length
1702:/usr/avr/include/avr/pgmspace.h ****     of the string as normal.
1703:/usr/avr/include/avr/pgmspace.h **** */
1704:/usr/avr/include/avr/pgmspace.h **** static inline size_t strlen_P(const char * s);
1705:/usr/avr/include/avr/pgmspace.h **** #else
1706:/usr/avr/include/avr/pgmspace.h **** extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
1707:/usr/avr/include/avr/pgmspace.h **** __attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
1708:/usr/avr/include/avr/pgmspace.h **** static __inline__ size_t strlen_P(const char *s) {
 113               		.loc 2 1708 26 view .LVU21
 114               	.LBB12:
1709:/usr/avr/include/avr/pgmspace.h ****   return __builtin_constant_p(__builtin_strlen(s))
 115               		.loc 2 1709 3 view .LVU22
1710:/usr/avr/include/avr/pgmspace.h ****      ? __builtin_strlen(s) : __strlen_P(s);
 116               		.loc 2 1710 30 is_stmt 0 view .LVU23
 117 004a C601      		movw r24,r12
 118 004c 0E94 0000 		call __strlen_P
 119               	.LVL7:
 120               		.loc 2 1710 30 view .LVU24
 121               	.LBE12:
 122               	.LBE11:
 123               		.loc 1 67 8 view .LVU25
 124 0050 12E0      		ldi r17,lo8(2)
 125 0052 180F      		add r17,r24
 126               	.LVL8:
  68:logger/logger.c **** 			while(len < LOG_START_WIDTH)
 127               		.loc 1 68 4 is_stmt 1 view .LVU26
 128               	.L5:
 129               		.loc 1 68 14 view .LVU27
 130 0054 1830      		cpi r17,lo8(8)
 131 0056 00F0      		brlo .L6
  69:logger/logger.c **** 			{
  70:logger/logger.c **** 				serial_tx(' ');
  71:logger/logger.c **** 				++len;
  72:logger/logger.c **** 			}
  73:logger/logger.c **** 
  74:logger/logger.c **** 			if(lcd_initialized())
 132               		.loc 1 74 4 view .LVU28
 133               		.loc 1 74 7 is_stmt 0 view .LVU29
 134 0058 0E94 0000 		call lcd_initialized
 135               	.LVL9:
 136               		.loc 1 74 6 view .LVU30
 137 005c 8111      		cpse r24,__zero_reg__
 138 005e 00C0      		rjmp .L7
 139               	.LVL10:
 140               	.L22:
  75:logger/logger.c **** 			{
  76:logger/logger.c **** 				RGB565 fg;
  77:logger/logger.c **** 
  78:logger/logger.c **** 				fg = pgm_read_word(&_log_color[level]);
  79:logger/logger.c **** 				x = LOG_X_OFFSET;
  80:logger/logger.c **** 				x += lcd_char(x, _log_y, COLOR_WHITE, COLOR_BLACK, '[');
  81:logger/logger.c **** 				x += lcd_string_P(x, _log_y, fg, COLOR_BLACK, level_str);
  82:logger/logger.c **** 				lcd_char(x, _log_y, COLOR_WHITE, COLOR_BLACK, ']');
  83:logger/logger.c **** 			}
  84:logger/logger.c **** 		}
  85:logger/logger.c **** 		else if(level == LOG_OFFSET)
  86:logger/logger.c **** 		{
  87:logger/logger.c **** 			for(len = 0; len < LOG_START_WIDTH; ++len)
  88:logger/logger.c **** 			{
  89:logger/logger.c **** 				serial_tx(' ');
  90:logger/logger.c **** 			}
  91:logger/logger.c **** 		}
  92:logger/logger.c **** 
  93:logger/logger.c **** 		if(lcd_initialized())
 141               		.loc 1 93 3 is_stmt 1 view .LVU31
 142               		.loc 1 93 6 is_stmt 0 view .LVU32
 143 0060 0E94 0000 		call lcd_initialized
 144               	.LVL11:
 145               		.loc 1 93 5 view .LVU33
 146 0064 8823      		tst r24
 147 0066 01F4      		brne .+2
 148 0068 00C0      		rjmp .L3
 149               	.LBB13:
  94:logger/logger.c **** 		{
  95:logger/logger.c **** 			const char *s;
  96:logger/logger.c **** 			char c;
  97:logger/logger.c **** 
  98:logger/logger.c **** 			x = LOG_X_TEXT_OFFSET;
 150               		.loc 1 98 6 view .LVU34
 151 006a 81E3      		ldi r24,lo8(49)
 152 006c C82E      		mov r12,r24
 153 006e D12C      		mov r13,__zero_reg__
 154               	.L9:
  99:logger/logger.c **** 			if(level == LOG_NONE)
 100:logger/logger.c **** 			{
 101:logger/logger.c **** 				x = 0;
 102:logger/logger.c **** 			}
 103:logger/logger.c **** 
 104:logger/logger.c **** 			s = msg;
 105:logger/logger.c **** 			while((c = *s++))
 106:logger/logger.c **** 			{
 107:logger/logger.c **** 				if(c == '\n')
 108:logger/logger.c **** 				{
 109:logger/logger.c **** 					x = 0;
 155               		.loc 1 109 8 view .LVU35
 156 0070 9E2D      		mov r25,r14
 157 0072 8F2D      		mov r24,r15
 158               	.L12:
 159               	.LVL12:
 105:logger/logger.c **** 			{
 160               		.loc 1 105 10 is_stmt 1 view .LVU36
 105:logger/logger.c **** 			{
 161               		.loc 1 105 17 is_stmt 0 view .LVU37
 162 0074 C92F      		mov r28,r25
 163 0076 D82F      		mov r29,r24
 164               	.LVL13:
 105:logger/logger.c **** 			{
 165               		.loc 1 105 13 view .LVU38
 166 0078 0991      		ld r16,Y+
 167               	.LVL14:
 110:logger/logger.c **** 					_log_y += LOG_Y_ADVANCE;
 168               		.loc 1 110 13 view .LVU39
 169 007a 6091 0000 		lds r22,_log_y
 170 007e 7091 0000 		lds r23,_log_y+1
 105:logger/logger.c **** 			{
 171               		.loc 1 105 10 view .LVU40
 172 0082 0111      		cpse r16,__zero_reg__
 173 0084 00C0      		rjmp .L15
 111:logger/logger.c **** 				}
 112:logger/logger.c **** 				else
 113:logger/logger.c **** 				{
 114:logger/logger.c **** 					x += lcd_char(LOG_X_OFFSET + x, _log_y,
 115:logger/logger.c **** 						COLOR_WHITE, COLOR_BLACK, c);
 116:logger/logger.c **** 				}
 117:logger/logger.c **** 			}
 118:logger/logger.c **** 
 119:logger/logger.c **** 			_log_y += LOG_Y_ADVANCE;
 174               		.loc 1 119 4 is_stmt 1 view .LVU41
 175               		.loc 1 119 11 is_stmt 0 view .LVU42
 176 0086 665F      		subi r22,-10
 177 0088 7F4F      		sbci r23,-1
 178 008a 7093 0000 		sts _log_y+1,r23
 179 008e 6093 0000 		sts _log_y,r22
 180 0092 00C0      		rjmp .L3
 181               	.LVL15:
 182               	.L6:
 183               		.loc 1 119 11 view .LVU43
 184               	.LBE13:
  70:logger/logger.c **** 				++len;
 185               		.loc 1 70 5 is_stmt 1 view .LVU44
 186 0094 80E2      		ldi r24,lo8(32)
 187 0096 0E94 0000 		call serial_tx
 188               	.LVL16:
  71:logger/logger.c **** 			}
 189               		.loc 1 71 5 view .LVU45
 190 009a 1F5F      		subi r17,lo8(-(1))
 191               	.LVL17:
  71:logger/logger.c **** 			}
 192               		.loc 1 71 5 is_stmt 0 view .LVU46
 193 009c 00C0      		rjmp .L5
 194               	.L7:
 195               	.LBB14:
  76:logger/logger.c **** 
 196               		.loc 1 76 5 is_stmt 1 view .LVU47
  78:logger/logger.c **** 				x = LOG_X_OFFSET;
 197               		.loc 1 78 5 view .LVU48
 198               	.LBB15:
  78:logger/logger.c **** 				x = LOG_X_OFFSET;
 199               		.loc 1 78 10 view .LVU49
 200 009e FE01      		movw r30,r28
 201 00a0 E050      		subi r30,lo8(-(_log_color))
 202 00a2 F040      		sbci r31,hi8(-(_log_color))
 203               	.LVL18:
  78:logger/logger.c **** 				x = LOG_X_OFFSET;
 204               		.loc 1 78 10 view .LVU50
  78:logger/logger.c **** 				x = LOG_X_OFFSET;
 205               		.loc 1 78 10 view .LVU51
 206               	/* #APP */
 207               	 ;  78 "logger/logger.c" 1
 208 00a4 A590      		lpm r10, Z+
 209 00a6 B490      		lpm r11, Z
 210               		
 211               	 ;  0 "" 2
 212               	.LVL19:
  78:logger/logger.c **** 				x = LOG_X_OFFSET;
 213               		.loc 1 78 10 view .LVU52
  78:logger/logger.c **** 				x = LOG_X_OFFSET;
 214               		.loc 1 78 10 is_stmt 0 view .LVU53
 215               	/* #NOAPP */
 216               	.LBE15:
  79:logger/logger.c **** 				x += lcd_char(x, _log_y, COLOR_WHITE, COLOR_BLACK, '[');
 217               		.loc 1 79 5 is_stmt 1 view .LVU54
  80:logger/logger.c **** 				x += lcd_string_P(x, _log_y, fg, COLOR_BLACK, level_str);
 218               		.loc 1 80 5 view .LVU55
  80:logger/logger.c **** 				x += lcd_string_P(x, _log_y, fg, COLOR_BLACK, level_str);
 219               		.loc 1 80 10 is_stmt 0 view .LVU56
 220 00a8 6091 0000 		lds r22,_log_y
 221 00ac 7091 0000 		lds r23,_log_y+1
 222 00b0 0BE5      		ldi r16,lo8(91)
 223 00b2 20E0      		ldi r18,0
 224 00b4 30E0      		ldi r19,0
 225 00b6 4FEF      		ldi r20,lo8(-1)
 226 00b8 5FEF      		ldi r21,lo8(-1)
 227 00ba 8AE0      		ldi r24,lo8(10)
 228 00bc 90E0      		ldi r25,0
 229 00be 0E94 0000 		call lcd_char
 230               	.LVL20:
 231 00c2 C82F      		mov r28,r24
 232 00c4 D0E0      		ldi r29,0
  80:logger/logger.c **** 				x += lcd_string_P(x, _log_y, fg, COLOR_BLACK, level_str);
 233               		.loc 1 80 7 view .LVU57
 234 00c6 2A96      		adiw r28,10
 235               	.LVL21:
  81:logger/logger.c **** 				lcd_char(x, _log_y, COLOR_WHITE, COLOR_BLACK, ']');
 236               		.loc 1 81 5 is_stmt 1 view .LVU58
  81:logger/logger.c **** 				lcd_char(x, _log_y, COLOR_WHITE, COLOR_BLACK, ']');
 237               		.loc 1 81 10 is_stmt 0 view .LVU59
 238 00c8 6091 0000 		lds r22,_log_y
 239 00cc 7091 0000 		lds r23,_log_y+1
 240 00d0 8601      		movw r16,r12
 241 00d2 20E0      		ldi r18,0
 242 00d4 30E0      		ldi r19,0
 243 00d6 A501      		movw r20,r10
 244 00d8 CE01      		movw r24,r28
 245 00da 0E94 0000 		call lcd_string_P
 246               	.LVL22:
  82:logger/logger.c **** 			}
 247               		.loc 1 82 5 is_stmt 1 view .LVU60
 248 00de 6091 0000 		lds r22,_log_y
 249 00e2 7091 0000 		lds r23,_log_y+1
 250 00e6 0DE5      		ldi r16,lo8(93)
 251 00e8 20E0      		ldi r18,0
 252 00ea 30E0      		ldi r19,0
 253 00ec 4FEF      		ldi r20,lo8(-1)
 254 00ee 5FEF      		ldi r21,lo8(-1)
 255 00f0 8C0F      		add r24,r28
 256 00f2 9D1F      		adc r25,r29
 257               	.LVL23:
  82:logger/logger.c **** 			}
 258               		.loc 1 82 5 is_stmt 0 view .LVU61
 259 00f4 0E94 0000 		call lcd_char
 260               	.LVL24:
  82:logger/logger.c **** 			}
 261               		.loc 1 82 5 view .LVU62
 262               	.LBE14:
  93:logger/logger.c **** 		{
 263               		.loc 1 93 3 is_stmt 1 view .LVU63
 264 00f8 00C0      		rjmp .L22
 265               	.LVL25:
 266               	.L4:
  85:logger/logger.c **** 		{
 267               		.loc 1 85 8 view .LVU64
  85:logger/logger.c **** 		{
 268               		.loc 1 85 10 is_stmt 0 view .LVU65
 269 00fa 8530      		cpi r24,lo8(5)
 270 00fc 01F0      		breq .L16
  93:logger/logger.c **** 		{
 271               		.loc 1 93 3 is_stmt 1 view .LVU66
  93:logger/logger.c **** 		{
 272               		.loc 1 93 6 is_stmt 0 view .LVU67
 273 00fe 0E94 0000 		call lcd_initialized
 274               	.LVL26:
  93:logger/logger.c **** 		{
 275               		.loc 1 93 5 view .LVU68
 276 0102 8111      		cpse r24,__zero_reg__
 277 0104 00C0      		rjmp .L17
 278               	.L3:
  93:logger/logger.c **** 		{
 279               		.loc 1 93 5 view .LVU69
 280               	.LBE9:
 120:logger/logger.c **** 		}
 121:logger/logger.c **** 	}
 122:logger/logger.c **** 
 123:logger/logger.c **** 	serial_tx_str(msg);
 281               		.loc 1 123 2 is_stmt 1 view .LVU70
 282 0106 C701      		movw r24,r14
 283               	/* epilogue start */
 124:logger/logger.c **** }
 284               		.loc 1 124 1 is_stmt 0 view .LVU71
 285 0108 DF91      		pop r29
 286 010a CF91      		pop r28
 287 010c 1F91      		pop r17
 288 010e 0F91      		pop r16
 289 0110 FF90      		pop r15
 290 0112 EF90      		pop r14
 291               	.LVL27:
 292               		.loc 1 124 1 view .LVU72
 293 0114 DF90      		pop r13
 294 0116 CF90      		pop r12
 295 0118 BF90      		pop r11
 296 011a AF90      		pop r10
 123:logger/logger.c **** }
 297               		.loc 1 123 2 view .LVU73
 298 011c 0C94 0000 		jmp serial_tx_str
 299               	.LVL28:
 300               	.L16:
 301               	.LBB17:
 123:logger/logger.c **** }
 302               		.loc 1 123 2 view .LVU74
 303 0120 C8E0      		ldi r28,lo8(8)
 304               	.LVL29:
 305               	.L11:
  89:logger/logger.c **** 			}
 306               		.loc 1 89 5 is_stmt 1 discriminator 3 view .LVU75
 307 0122 80E2      		ldi r24,lo8(32)
 308 0124 0E94 0000 		call serial_tx
 309               	.LVL30:
  87:logger/logger.c **** 			{
 310               		.loc 1 87 40 discriminator 3 view .LVU76
  87:logger/logger.c **** 			{
 311               		.loc 1 87 21 discriminator 3 view .LVU77
 312 0128 C150      		subi r28,lo8(-(-1))
 313               	.LVL31:
  87:logger/logger.c **** 			{
 314               		.loc 1 87 21 is_stmt 0 discriminator 3 view .LVU78
 315 012a C111      		cpse r28,__zero_reg__
 316 012c 00C0      		rjmp .L11
 317 012e 00C0      		rjmp .L22
 318               	.LVL32:
 319               	.L17:
 320               	.LBB16:
 101:logger/logger.c **** 			}
 321               		.loc 1 101 7 view .LVU79
 322 0130 C12C      		mov r12,__zero_reg__
 323 0132 D12C      		mov r13,__zero_reg__
 324 0134 00C0      		rjmp .L9
 325               	.LVL33:
 326               	.L15:
 107:logger/logger.c **** 				{
 327               		.loc 1 107 5 is_stmt 1 view .LVU80
 107:logger/logger.c **** 				{
 328               		.loc 1 107 7 is_stmt 0 view .LVU81
 329 0136 0A30      		cpi r16,lo8(10)
 330 0138 01F4      		brne .L13
 109:logger/logger.c **** 					_log_y += LOG_Y_ADVANCE;
 331               		.loc 1 109 6 is_stmt 1 view .LVU82
 332               	.LVL34:
 110:logger/logger.c **** 				}
 333               		.loc 1 110 6 view .LVU83
 110:logger/logger.c **** 				}
 334               		.loc 1 110 13 is_stmt 0 view .LVU84
 335 013a 665F      		subi r22,-10
 336 013c 7F4F      		sbci r23,-1
 337 013e 7093 0000 		sts _log_y+1,r23
 338 0142 6093 0000 		sts _log_y,r22
 109:logger/logger.c **** 					_log_y += LOG_Y_ADVANCE;
 339               		.loc 1 109 8 view .LVU85
 340 0146 C12C      		mov r12,__zero_reg__
 341 0148 D12C      		mov r13,__zero_reg__
 342               	.LVL35:
 343               	.L14:
 109:logger/logger.c **** 					_log_y += LOG_Y_ADVANCE;
 344               		.loc 1 109 8 view .LVU86
 345 014a 9C2F      		mov r25,r28
 346 014c 8D2F      		mov r24,r29
 347 014e 00C0      		rjmp .L12
 348               	.LVL36:
 349               	.L13:
 114:logger/logger.c **** 						COLOR_WHITE, COLOR_BLACK, c);
 350               		.loc 1 114 6 is_stmt 1 view .LVU87
 114:logger/logger.c **** 						COLOR_WHITE, COLOR_BLACK, c);
 351               		.loc 1 114 11 is_stmt 0 view .LVU88
 352 0150 20E0      		ldi r18,0
 353 0152 30E0      		ldi r19,0
 354 0154 4FEF      		ldi r20,lo8(-1)
 355 0156 5FEF      		ldi r21,lo8(-1)
 356 0158 C601      		movw r24,r12
 357 015a 0A96      		adiw r24,10
 358 015c 0E94 0000 		call lcd_char
 359               	.LVL37:
 114:logger/logger.c **** 						COLOR_WHITE, COLOR_BLACK, c);
 360               		.loc 1 114 8 view .LVU89
 361 0160 C80E      		add r12,r24
 362 0162 D11C      		adc r13,__zero_reg__
 363               	.LVL38:
 114:logger/logger.c **** 						COLOR_WHITE, COLOR_BLACK, c);
 364               		.loc 1 114 8 view .LVU90
 365 0164 00C0      		rjmp .L14
 366               	.LBE16:
 367               	.LBE17:
 368               		.cfi_endproc
 369               	.LFE4:
 371               	.global	log_boot_P
 373               	log_boot_P:
 374               	.LVL39:
 375               	.LFB5:
 125:logger/logger.c **** 
 126:logger/logger.c **** void log_boot_P(LogLevel level, const char *msg, ...)
 127:logger/logger.c **** {
 376               		.loc 1 127 1 is_stmt 1 view -0
 377               		.cfi_startproc
 378               		.loc 1 127 1 is_stmt 0 view .LVU92
 379 0166 CF93      		push r28
 380               		.cfi_def_cfa_offset 3
 381               		.cfi_offset 28, -2
 382 0168 DF93      		push r29
 383               		.cfi_def_cfa_offset 4
 384               		.cfi_offset 29, -3
 385 016a CDB7      		in r28,__SP_L__
 386 016c DEB7      		in r29,__SP_H__
 387               		.cfi_def_cfa_register 28
 388 016e C058      		subi r28,-128
 389 0170 D109      		sbc r29,__zero_reg__
 390               		.cfi_def_cfa_offset 132
 391 0172 0FB6      		in __tmp_reg__,__SREG__
 392 0174 F894      		cli
 393 0176 DEBF      		out __SP_H__,r29
 394 0178 0FBE      		out __SREG__,__tmp_reg__
 395 017a CDBF      		out __SP_L__,r28
 396               	/* prologue: function */
 397               	/* frame size = 128 */
 398               	/* stack size = 130 */
 399               	.L__stack_usage = 130
 128:logger/logger.c **** 	char buf[128];
 400               		.loc 1 128 2 is_stmt 1 view .LVU93
 129:logger/logger.c **** 	va_list v;
 401               		.loc 1 129 2 view .LVU94
 130:logger/logger.c **** 
 131:logger/logger.c **** 	va_start(v, msg);
 402               		.loc 1 131 2 view .LVU95
 403               	.LVL40:
 132:logger/logger.c **** 	vsnprintf_P(buf, sizeof(buf), msg, v);
 404               		.loc 1 132 2 view .LVU96
 405 017c 9E01      		movw r18,r28
 406 017e 2857      		subi r18,120
 407 0180 3F4F      		sbci r19,-1
 408               	.LVL41:
 409               		.loc 1 132 2 is_stmt 0 view .LVU97
 410 0182 CA57      		subi r28,lo8(-134)
 411 0184 DF4F      		sbci r29,hi8(-134)
 412 0186 4881      		ld r20,Y
 413 0188 5981      		ldd r21,Y+1
 414 018a C658      		subi r28,lo8(134)
 415 018c D040      		sbci r29,hi8(134)
 416 018e 60E8      		ldi r22,lo8(-128)
 417 0190 70E0      		ldi r23,0
 418 0192 CE01      		movw r24,r28
 419 0194 0196      		adiw r24,1
 420 0196 0E94 0000 		call vsnprintf_P
 421               	.LVL42:
 133:logger/logger.c **** 	va_end(v);
 422               		.loc 1 133 2 is_stmt 1 view .LVU98
 134:logger/logger.c **** 
 135:logger/logger.c **** 	_lcd_log(level, buf);
 423               		.loc 1 135 2 view .LVU99
 424 019a BE01      		movw r22,r28
 425 019c 6F5F      		subi r22,-1
 426 019e 7F4F      		sbci r23,-1
 427 01a0 CB57      		subi r28,lo8(-133)
 428 01a2 DF4F      		sbci r29,hi8(-133)
 429 01a4 8881      		ld r24,Y
 430 01a6 C558      		subi r28,lo8(133)
 431 01a8 D040      		sbci r29,hi8(133)
 432 01aa 0E94 0000 		call _lcd_log
 433               	.LVL43:
 136:logger/logger.c **** 	serial_tx('\n');
 434               		.loc 1 136 2 view .LVU100
 435 01ae 8AE0      		ldi r24,lo8(10)
 436 01b0 0E94 0000 		call serial_tx
 437               	.LVL44:
 438               	/* epilogue start */
 137:logger/logger.c **** }
 439               		.loc 1 137 1 is_stmt 0 view .LVU101
 440 01b4 C058      		subi r28,-128
 441 01b6 DF4F      		sbci r29,-1
 442 01b8 0FB6      		in __tmp_reg__,__SREG__
 443 01ba F894      		cli
 444 01bc DEBF      		out __SP_H__,r29
 445 01be 0FBE      		out __SREG__,__tmp_reg__
 446 01c0 CDBF      		out __SP_L__,r28
 447 01c2 DF91      		pop r29
 448 01c4 CF91      		pop r28
 449 01c6 0895      		ret
 450               		.cfi_endproc
 451               	.LFE5:
 453               	.global	panic
 455               	panic:
 456               	.LVL45:
 457               	.LFB6:
 138:logger/logger.c **** 
 139:logger/logger.c **** void panic(const char *msg, ...)
 140:logger/logger.c **** {
 458               		.loc 1 140 1 is_stmt 1 view -0
 459               		.cfi_startproc
 460               		.loc 1 140 1 is_stmt 0 view .LVU103
 461 01c8 CF93      		push r28
 462               		.cfi_def_cfa_offset 3
 463               		.cfi_offset 28, -2
 464 01ca DF93      		push r29
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 29, -3
 467 01cc CDB7      		in r28,__SP_L__
 468 01ce DEB7      		in r29,__SP_H__
 469               		.cfi_def_cfa_register 28
 470 01d0 C058      		subi r28,-128
 471 01d2 D109      		sbc r29,__zero_reg__
 472               		.cfi_def_cfa_offset 132
 473 01d4 0FB6      		in __tmp_reg__,__SREG__
 474 01d6 F894      		cli
 475 01d8 DEBF      		out __SP_H__,r29
 476 01da 0FBE      		out __SREG__,__tmp_reg__
 477 01dc CDBF      		out __SP_L__,r28
 478               	/* prologue: function */
 479               	/* frame size = 128 */
 480               	/* stack size = 130 */
 481               	.L__stack_usage = 130
 482 01de 9E01      		movw r18,r28
 483 01e0 2B57      		subi r18,123
 484 01e2 3F4F      		sbci r19,-1
 485               	.LVL46:
 486               		.loc 1 140 1 view .LVU104
 487 01e4 F901      		movw r30,r18
 488 01e6 4191      		ld r20,Z+
 489 01e8 5191      		ld r21,Z+
 490               	.LVL47:
 491               		.loc 1 140 1 view .LVU105
 492 01ea 9F01      		movw r18,r30
 141:logger/logger.c **** 	char buf[128];
 493               		.loc 1 141 2 is_stmt 1 view .LVU106
 142:logger/logger.c **** 	va_list v;
 494               		.loc 1 142 2 view .LVU107
 143:logger/logger.c **** 
 144:logger/logger.c **** 	va_start(v, msg);
 495               		.loc 1 144 2 view .LVU108
 496               	.LVL48:
 145:logger/logger.c **** 	vsnprintf_P(buf, sizeof(buf), msg, v);
 497               		.loc 1 145 2 view .LVU109
 498 01ec 60E8      		ldi r22,lo8(-128)
 499 01ee 70E0      		ldi r23,0
 500 01f0 CE01      		movw r24,r28
 501 01f2 0196      		adiw r24,1
 502 01f4 0E94 0000 		call vsnprintf_P
 503               	.LVL49:
 146:logger/logger.c **** 	va_end(v);
 504               		.loc 1 146 2 view .LVU110
 147:logger/logger.c **** 
 148:logger/logger.c **** 	_lcd_log(LOG_PANIC, buf);
 505               		.loc 1 148 2 view .LVU111
 506 01f8 BE01      		movw r22,r28
 507 01fa 6F5F      		subi r22,-1
 508 01fc 7F4F      		sbci r23,-1
 509 01fe 84E0      		ldi r24,lo8(4)
 510 0200 0E94 0000 		call _lcd_log
 511               	.LVL50:
 149:logger/logger.c **** 	serial_tx('\n');
 512               		.loc 1 149 2 view .LVU112
 513 0204 8AE0      		ldi r24,lo8(10)
 514 0206 0E94 0000 		call serial_tx
 515               	.LVL51:
 150:logger/logger.c **** 	strcpy_P(buf, PSTR("\n>>> RESET REQUIRED\n"));
 516               		.loc 1 150 2 view .LVU113
 517               	.LBB18:
 518               		.loc 1 150 16 view .LVU114
 519               		.loc 1 150 16 view .LVU115
 520               	.LBE18:
 521               		.loc 1 150 2 is_stmt 0 view .LVU116
 522 020a 60E0      		ldi r22,lo8(__c.0)
 523 020c 70E0      		ldi r23,hi8(__c.0)
 524 020e CE01      		movw r24,r28
 525 0210 0196      		adiw r24,1
 526 0212 0E94 0000 		call strcpy_P
 527               	.LVL52:
 151:logger/logger.c **** 	_lcd_log(LOG_NONE, buf);
 528               		.loc 1 151 2 is_stmt 1 view .LVU117
 529 0216 BE01      		movw r22,r28
 530 0218 6F5F      		subi r22,-1
 531 021a 7F4F      		sbci r23,-1
 532 021c 86E0      		ldi r24,lo8(6)
 533 021e 0E94 0000 		call _lcd_log
 534               	.LVL53:
 152:logger/logger.c **** 
 153:logger/logger.c **** 	/* Disable interrupt */
 154:logger/logger.c **** 	cli();
 535               		.loc 1 154 2 view .LVU118
 536               	/* #APP */
 537               	 ;  154 "logger/logger.c" 1
 538 0222 F894      		cli
 539               	 ;  0 "" 2
 540               	/* #NOAPP */
 541               	.L25:
 155:logger/logger.c **** 
 156:logger/logger.c **** 	/* Infinite loop */
 157:logger/logger.c **** 	for(;;)
 542               		.loc 1 157 2 discriminator 1 view .LVU119
 158:logger/logger.c **** 	{
 159:logger/logger.c **** 	}
 543               		.loc 1 159 2 discriminator 1 view .LVU120
 157:logger/logger.c **** 	{
 544               		.loc 1 157 2 discriminator 1 view .LVU121
 545 0224 00C0      		rjmp .L25
 546               		.cfi_endproc
 547               	.LFE6:
 549               		.section	.rodata.str1.1,"aMS",@progbits,1
 550               	.LC0:
 551 0000 2530 3858 		.string	"%08X | "
 551      207C 2000 
 552               	.LC1:
 553 0008 2530 3258 		.string	"%02X "
 553      2000 
 554               	.LC2:
 555 000e 7C20 00   		.string	"| "
 556               		.text
 557               	.global	memory_dump
 559               	memory_dump:
 560               	.LVL54:
 561               	.LFB7:
 160:logger/logger.c **** }
 161:logger/logger.c **** 
 162:logger/logger.c **** void memory_dump(u32 addr, const void *data, u16 len)
 163:logger/logger.c **** {
 562               		.loc 1 163 1 view -0
 563               		.cfi_startproc
 564               		.loc 1 163 1 is_stmt 0 view .LVU123
 565 0226 2F92      		push r2
 566               		.cfi_def_cfa_offset 3
 567               		.cfi_offset 2, -2
 568 0228 3F92      		push r3
 569               		.cfi_def_cfa_offset 4
 570               		.cfi_offset 3, -3
 571 022a 4F92      		push r4
 572               		.cfi_def_cfa_offset 5
 573               		.cfi_offset 4, -4
 574 022c 5F92      		push r5
 575               		.cfi_def_cfa_offset 6
 576               		.cfi_offset 5, -5
 577 022e 6F92      		push r6
 578               		.cfi_def_cfa_offset 7
 579               		.cfi_offset 6, -6
 580 0230 7F92      		push r7
 581               		.cfi_def_cfa_offset 8
 582               		.cfi_offset 7, -7
 583 0232 8F92      		push r8
 584               		.cfi_def_cfa_offset 9
 585               		.cfi_offset 8, -8
 586 0234 9F92      		push r9
 587               		.cfi_def_cfa_offset 10
 588               		.cfi_offset 9, -9
 589 0236 AF92      		push r10
 590               		.cfi_def_cfa_offset 11
 591               		.cfi_offset 10, -10
 592 0238 BF92      		push r11
 593               		.cfi_def_cfa_offset 12
 594               		.cfi_offset 11, -11
 595 023a CF92      		push r12
 596               		.cfi_def_cfa_offset 13
 597               		.cfi_offset 12, -12
 598 023c DF92      		push r13
 599               		.cfi_def_cfa_offset 14
 600               		.cfi_offset 13, -13
 601 023e EF92      		push r14
 602               		.cfi_def_cfa_offset 15
 603               		.cfi_offset 14, -14
 604 0240 FF92      		push r15
 605               		.cfi_def_cfa_offset 16
 606               		.cfi_offset 15, -15
 607 0242 0F93      		push r16
 608               		.cfi_def_cfa_offset 17
 609               		.cfi_offset 16, -16
 610 0244 1F93      		push r17
 611               		.cfi_def_cfa_offset 18
 612               		.cfi_offset 17, -17
 613 0246 CF93      		push r28
 614               		.cfi_def_cfa_offset 19
 615               		.cfi_offset 28, -18
 616 0248 DF93      		push r29
 617               		.cfi_def_cfa_offset 20
 618               		.cfi_offset 29, -19
 619 024a CDB7      		in r28,__SP_L__
 620 024c DEB7      		in r29,__SP_H__
 621               		.cfi_def_cfa_register 28
 622 024e A097      		sbiw r28,32
 623               		.cfi_def_cfa_offset 52
 624 0250 0FB6      		in __tmp_reg__,__SREG__
 625 0252 F894      		cli
 626 0254 DEBF      		out __SP_H__,r29
 627 0256 0FBE      		out __SREG__,__tmp_reg__
 628 0258 CDBF      		out __SP_L__,r28
 629               	/* prologue: function */
 630               	/* frame size = 32 */
 631               	/* stack size = 50 */
 632               	.L__stack_usage = 50
 633 025a 2B01      		movw r4,r22
 634 025c 3C01      		movw r6,r24
 635 025e 6901      		movw r12,r18
 164:logger/logger.c **** 	u8 j;
 636               		.loc 1 164 2 is_stmt 1 view .LVU124
 165:logger/logger.c **** 	const u8 *data8;
 637               		.loc 1 165 2 view .LVU125
 166:logger/logger.c **** 	u16 i;
 638               		.loc 1 166 2 view .LVU126
 167:logger/logger.c **** 	char c, buf[32];
 639               		.loc 1 167 2 view .LVU127
 168:logger/logger.c **** 
 169:logger/logger.c **** 	data8 = data;
 640               		.loc 1 169 2 view .LVU128
 641               	.LVL55:
 170:logger/logger.c **** 	for(i = 0; i < len; i += MEMORY_DUMP_WIDTH, addr += MEMORY_DUMP_WIDTH)
 642               		.loc 1 170 2 view .LVU129
 643               		.loc 1 170 2 is_stmt 0 view .LVU130
 644 0260 8A01      		movw r16,r20
 645               		.loc 1 170 8 view .LVU131
 646 0262 E12C      		mov r14,__zero_reg__
 647 0264 F12C      		mov r15,__zero_reg__
 171:logger/logger.c **** 	{
 172:logger/logger.c **** 		snprintf(buf, sizeof(buf), "%08X | ", addr);
 173:logger/logger.c **** 		serial_tx_str(buf);
 174:logger/logger.c **** 		for(j = 0; j < MEMORY_DUMP_WIDTH; ++j)
 175:logger/logger.c **** 		{
 176:logger/logger.c **** 			snprintf(buf, sizeof(buf), "%02X ", data8[i + j]);
 648               		.loc 1 176 4 view .LVU132
 649 0266 90E0      		ldi r25,lo8(.LC1)
 650 0268 A92E      		mov r10,r25
 651 026a 90E0      		ldi r25,hi8(.LC1)
 652 026c B92E      		mov r11,r25
 653               	.LVL56:
 654               	.L27:
 170:logger/logger.c **** 	for(i = 0; i < len; i += MEMORY_DUMP_WIDTH, addr += MEMORY_DUMP_WIDTH)
 655               		.loc 1 170 15 is_stmt 1 discriminator 1 view .LVU133
 656 026e EC14      		cp r14,r12
 657 0270 FD04      		cpc r15,r13
 658 0272 00F0      		brlo .L31
 177:logger/logger.c **** 			serial_tx_str(buf);
 178:logger/logger.c **** 		}
 179:logger/logger.c **** 
 180:logger/logger.c **** 		serial_tx_str("| ");
 181:logger/logger.c **** 		for(j = 0; j < MEMORY_DUMP_WIDTH; ++j)
 182:logger/logger.c **** 		{
 183:logger/logger.c **** 			c = data8[i + j];
 184:logger/logger.c **** 			serial_tx(isprint(c) ? c : '.');
 185:logger/logger.c **** 		}
 186:logger/logger.c **** 
 187:logger/logger.c **** 		serial_tx('\n');
 188:logger/logger.c **** 	}
 189:logger/logger.c **** 
 190:logger/logger.c **** 	serial_tx('\n');
 659               		.loc 1 190 2 view .LVU134
 660 0274 8AE0      		ldi r24,lo8(10)
 661 0276 0E94 0000 		call serial_tx
 662               	.LVL57:
 663               	/* epilogue start */
 191:logger/logger.c **** }
 664               		.loc 1 191 1 is_stmt 0 view .LVU135
 665 027a A096      		adiw r28,32
 666 027c 0FB6      		in __tmp_reg__,__SREG__
 667 027e F894      		cli
 668 0280 DEBF      		out __SP_H__,r29
 669 0282 0FBE      		out __SREG__,__tmp_reg__
 670 0284 CDBF      		out __SP_L__,r28
 671 0286 DF91      		pop r29
 672 0288 CF91      		pop r28
 673 028a 1F91      		pop r17
 674 028c 0F91      		pop r16
 675 028e FF90      		pop r15
 676 0290 EF90      		pop r14
 677               	.LVL58:
 678               		.loc 1 191 1 view .LVU136
 679 0292 DF90      		pop r13
 680 0294 CF90      		pop r12
 681               	.LVL59:
 682               		.loc 1 191 1 view .LVU137
 683 0296 BF90      		pop r11
 684 0298 AF90      		pop r10
 685 029a 9F90      		pop r9
 686 029c 8F90      		pop r8
 687 029e 7F90      		pop r7
 688 02a0 6F90      		pop r6
 689 02a2 5F90      		pop r5
 690 02a4 4F90      		pop r4
 691               	.LVL60:
 692               		.loc 1 191 1 view .LVU138
 693 02a6 3F90      		pop r3
 694 02a8 2F90      		pop r2
 695 02aa 0895      		ret
 696               	.LVL61:
 697               	.L31:
 172:logger/logger.c **** 		serial_tx_str(buf);
 698               		.loc 1 172 3 is_stmt 1 view .LVU139
 699 02ac 7F92      		push r7
 700 02ae 6F92      		push r6
 701 02b0 5F92      		push r5
 702 02b2 4F92      		push r4
 703 02b4 80E0      		ldi r24,lo8(.LC0)
 704 02b6 90E0      		ldi r25,hi8(.LC0)
 705 02b8 9F93      		push r25
 706 02ba 8F93      		push r24
 707 02bc 1F92      		push __zero_reg__
 708 02be F0E2      		ldi r31,lo8(32)
 709 02c0 FF93      		push r31
 710 02c2 81E0      		ldi r24,lo8(1)
 711 02c4 90E0      		ldi r25,0
 712 02c6 8C0F      		add r24,r28
 713 02c8 9D1F      		adc r25,r29
 714 02ca 9F93      		push r25
 715 02cc 8F93      		push r24
 716 02ce 0E94 0000 		call snprintf
 717               	.LVL62:
 173:logger/logger.c **** 		for(j = 0; j < MEMORY_DUMP_WIDTH; ++j)
 718               		.loc 1 173 3 view .LVU140
 719 02d2 CE01      		movw r24,r28
 720 02d4 0196      		adiw r24,1
 721 02d6 0E94 0000 		call serial_tx_str
 722               	.LVL63:
 174:logger/logger.c **** 		{
 723               		.loc 1 174 3 view .LVU141
 174:logger/logger.c **** 		{
 724               		.loc 1 174 16 view .LVU142
 173:logger/logger.c **** 		for(j = 0; j < MEMORY_DUMP_WIDTH; ++j)
 725               		.loc 1 173 3 is_stmt 0 view .LVU143
 726 02da 0FB6      		in __tmp_reg__,__SREG__
 727 02dc F894      		cli
 728 02de DEBF      		out __SP_H__,r29
 729 02e0 0FBE      		out __SREG__,__tmp_reg__
 730 02e2 CDBF      		out __SP_L__,r28
 731 02e4 4801      		movw r8,r16
 174:logger/logger.c **** 		{
 732               		.loc 1 174 9 view .LVU144
 733 02e6 312C      		mov r3,__zero_reg__
 734               	.LVL64:
 735               	.L28:
 176:logger/logger.c **** 			serial_tx_str(buf);
 736               		.loc 1 176 4 is_stmt 1 discriminator 3 view .LVU145
 176:logger/logger.c **** 			serial_tx_str(buf);
 737               		.loc 1 176 45 is_stmt 0 discriminator 3 view .LVU146
 738 02e8 F401      		movw r30,r8
 739 02ea 8191      		ld r24,Z+
 740 02ec 4F01      		movw r8,r30
 176:logger/logger.c **** 			serial_tx_str(buf);
 741               		.loc 1 176 4 discriminator 3 view .LVU147
 742 02ee 1F92      		push __zero_reg__
 743 02f0 8F93      		push r24
 744 02f2 BF92      		push r11
 745 02f4 AF92      		push r10
 746 02f6 1F92      		push __zero_reg__
 747 02f8 F0E2      		ldi r31,lo8(32)
 748 02fa FF93      		push r31
 749 02fc 81E0      		ldi r24,lo8(1)
 750 02fe 90E0      		ldi r25,0
 751 0300 8C0F      		add r24,r28
 752 0302 9D1F      		adc r25,r29
 753 0304 9F93      		push r25
 754 0306 8F93      		push r24
 755 0308 0E94 0000 		call snprintf
 756               	.LVL65:
 177:logger/logger.c **** 		}
 757               		.loc 1 177 4 is_stmt 1 discriminator 3 view .LVU148
 758 030c CE01      		movw r24,r28
 759 030e 0196      		adiw r24,1
 760 0310 0E94 0000 		call serial_tx_str
 761               	.LVL66:
 174:logger/logger.c **** 		{
 762               		.loc 1 174 37 discriminator 3 view .LVU149
 763 0314 3394      		inc r3
 764               	.LVL67:
 174:logger/logger.c **** 		{
 765               		.loc 1 174 16 discriminator 3 view .LVU150
 766 0316 0FB6      		in __tmp_reg__,__SREG__
 767 0318 F894      		cli
 768 031a DEBF      		out __SP_H__,r29
 769 031c 0FBE      		out __SREG__,__tmp_reg__
 770 031e CDBF      		out __SP_L__,r28
 771 0320 F0E1      		ldi r31,lo8(16)
 772 0322 3F12      		cpse r3,r31
 773 0324 00C0      		rjmp .L28
 180:logger/logger.c **** 		for(j = 0; j < MEMORY_DUMP_WIDTH; ++j)
 774               		.loc 1 180 3 view .LVU151
 775 0326 80E0      		ldi r24,lo8(.LC2)
 776 0328 90E0      		ldi r25,hi8(.LC2)
 777 032a 0E94 0000 		call serial_tx_str
 778               	.LVL68:
 181:logger/logger.c **** 		{
 779               		.loc 1 181 3 view .LVU152
 181:logger/logger.c **** 		{
 780               		.loc 1 181 16 view .LVU153
 180:logger/logger.c **** 		for(j = 0; j < MEMORY_DUMP_WIDTH; ++j)
 781               		.loc 1 180 3 is_stmt 0 view .LVU154
 782 032e 4801      		movw r8,r16
 181:logger/logger.c **** 		{
 783               		.loc 1 181 9 view .LVU155
 784 0330 312C      		mov r3,__zero_reg__
 785               	.LVL69:
 786               	.L30:
 183:logger/logger.c **** 			serial_tx(isprint(c) ? c : '.');
 787               		.loc 1 183 4 is_stmt 1 view .LVU156
 183:logger/logger.c **** 			serial_tx(isprint(c) ? c : '.');
 788               		.loc 1 183 6 is_stmt 0 view .LVU157
 789 0332 F401      		movw r30,r8
 790 0334 2190      		ld r2,Z+
 791 0336 4F01      		movw r8,r30
 792               	.LVL70:
 184:logger/logger.c **** 		}
 793               		.loc 1 184 4 is_stmt 1 view .LVU158
 184:logger/logger.c **** 		}
 794               		.loc 1 184 14 is_stmt 0 view .LVU159
 795 0338 822D      		mov r24,r2
 796 033a 90E0      		ldi r25,0
 797 033c 0E94 0000 		call isprint
 798               	.LVL71:
 184:logger/logger.c **** 		}
 799               		.loc 1 184 4 view .LVU160
 800 0340 892B      		or r24,r25
 801 0342 01F4      		brne .L29
 802 0344 8EE2      		ldi r24,lo8(46)
 803 0346 282E      		mov r2,r24
 804               	.LVL72:
 805               	.L29:
 184:logger/logger.c **** 		}
 806               		.loc 1 184 4 discriminator 4 view .LVU161
 807 0348 822D      		mov r24,r2
 808 034a 0E94 0000 		call serial_tx
 809               	.LVL73:
 181:logger/logger.c **** 		{
 810               		.loc 1 181 37 is_stmt 1 discriminator 4 view .LVU162
 811 034e 3394      		inc r3
 812               	.LVL74:
 181:logger/logger.c **** 		{
 813               		.loc 1 181 16 discriminator 4 view .LVU163
 814 0350 F0E1      		ldi r31,lo8(16)
 815 0352 3F12      		cpse r3,r31
 816 0354 00C0      		rjmp .L30
 187:logger/logger.c **** 	}
 817               		.loc 1 187 3 discriminator 2 view .LVU164
 818 0356 8AE0      		ldi r24,lo8(10)
 819 0358 0E94 0000 		call serial_tx
 820               	.LVL75:
 170:logger/logger.c **** 	{
 821               		.loc 1 170 44 discriminator 2 view .LVU165
 170:logger/logger.c **** 	{
 822               		.loc 1 170 24 is_stmt 0 discriminator 2 view .LVU166
 823 035c 20E1      		ldi r18,16
 824 035e E20E      		add r14,r18
 825 0360 F11C      		adc r15,__zero_reg__
 826               	.LVL76:
 170:logger/logger.c **** 	{
 827               		.loc 1 170 51 discriminator 2 view .LVU167
 828 0362 80E1      		ldi r24,16
 829 0364 480E      		add r4,r24
 830 0366 511C      		adc r5,__zero_reg__
 831 0368 611C      		adc r6,__zero_reg__
 832 036a 711C      		adc r7,__zero_reg__
 833               	.LVL77:
 170:logger/logger.c **** 	{
 834               		.loc 1 170 51 discriminator 2 view .LVU168
 835 036c 005F      		subi r16,-16
 836 036e 1F4F      		sbci r17,-1
 837 0370 00C0      		rjmp .L27
 838               		.cfi_endproc
 839               	.LFE7:
 841               		.section	.progmem.data,"a",@progbits
 844               	__c.0:
 845 0000 0A3E 3E3E 		.string	"\n>>> RESET REQUIRED\n"
 845      2052 4553 
 845      4554 2052 
 845      4551 5549 
 845      5245 440A 
 846               		.data
 849               	_log_y:
 850 0000 7800      		.word	120
 851               	.global	_log_msg
 852               		.section	.progmem.data,"a",@progbits
 855               	_log_msg:
 856 0015 0000      		.word	_init
 857 0017 0000      		.word	_debug
 858 0019 0000      		.word	_warn
 859 001b 0000      		.word	_error
 860 001d 0000      		.word	_panic
 861               	.global	_panic
 864               	_panic:
 865 001f 5041 4E49 		.string	"PANIC"
 865      4300 
 866               	.global	_error
 869               	_error:
 870 0025 4552 524F 		.string	"ERROR"
 870      5200 
 871               	.global	_warn
 874               	_warn:
 875 002b 5741 524E 		.string	"WARN"
 875      00
 876               	.global	_debug
 879               	_debug:
 880 0030 4445 4255 		.string	"DEBUG"
 880      4700 
 881               	.global	_init
 884               	_init:
 885 0036 494E 4954 		.string	"INIT"
 885      00
 886               	.global	_log_color
 889               	_log_color:
 890 003b FF07      		.word	2047
 891 003d E007      		.word	2016
 892 003f E0FF      		.word	-32
 893 0041 00F8      		.word	-2048
 894 0043 1FF8      		.word	-2017
 895               		.text
 896               	.Letext0:
 897               		.file 3 "/usr/lib/gcc/avr/12.2.0/include/stddef.h"
 898               		.file 4 "/usr/lib/gcc/avr/12.2.0/include/stdint-gcc.h"
 899               		.file 5 "../../types/types.h"
 900               		.file 6 "logger/logger.h"
 901               		.file 7 "lcd/lcd.h"
 902               		.file 8 "/usr/lib/gcc/avr/12.2.0/include/stdarg.h"
 903               		.file 9 "/usr/avr/include/ctype.h"
 904               		.file 10 "/usr/avr/include/stdio.h"
 905               		.file 11 "serial/serial.h"
DEFINED SYMBOLS
                            *ABS*:00000000 logger.c
     /tmp/ccetrSNK.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccetrSNK.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccetrSNK.s:4      *ABS*:0000003f __SREG__
     /tmp/ccetrSNK.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccetrSNK.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccetrSNK.s:12     .text:00000000 _lcd_log
     /tmp/ccetrSNK.s:16     .text:00000000 .Loc.0
     /tmp/ccetrSNK.s:17     .text:00000000 L0
     /tmp/ccetrSNK.s:18     .text:00000000 .Loc.1
     /tmp/ccetrSNK.s:54     .text:00000016 .Loc.2
     /tmp/ccetrSNK.s:55     .text:00000016 .Loc.3
     /tmp/ccetrSNK.s:57     .text:0000001a L0
     /tmp/ccetrSNK.s:60     .text:0000001c .Loc.4
     /tmp/ccetrSNK.s:61     .text:0000001c .Loc.5
     /tmp/ccetrSNK.s:62     .text:0000001c .Loc.6
     /tmp/ccetrSNK.s:63     .text:0000001c .Loc.7
     /tmp/ccetrSNK.s:64     .text:0000001c .Loc.8
     /tmp/ccetrSNK.s:67     .text:00000020 .Loc.9
     /tmp/ccetrSNK.s:69     .text:00000024 L0
     /tmp/ccetrSNK.s:71     .text:00000026 .Loc.10
     /tmp/ccetrSNK.s:73     .text:00000026 .Loc.11
     /tmp/ccetrSNK.s:855    .progmem.data:00000015 _log_msg
     /tmp/ccetrSNK.s:82     .text:00000034 .Loc.12
     /tmp/ccetrSNK.s:83     .text:00000034 .Loc.13
     /tmp/ccetrSNK.s:91     .text:00000038 .Loc.14
     /tmp/ccetrSNK.s:92     .text:00000038 .Loc.15
     /tmp/ccetrSNK.s:95     .text:00000038 .Loc.16
     /tmp/ccetrSNK.s:98     .text:0000003a .Loc.17
     /tmp/ccetrSNK.s:101    .text:0000003e .Loc.18
     /tmp/ccetrSNK.s:105    .text:00000044 .Loc.19
     /tmp/ccetrSNK.s:109    .text:0000004a .Loc.20
     /tmp/ccetrSNK.s:113    .text:0000004a .Loc.21
     /tmp/ccetrSNK.s:115    .text:0000004a .Loc.22
     /tmp/ccetrSNK.s:116    .text:0000004a .Loc.23
     /tmp/ccetrSNK.s:120    .text:00000050 .Loc.24
     /tmp/ccetrSNK.s:123    .text:00000050 .Loc.25
     /tmp/ccetrSNK.s:127    .text:00000054 .Loc.26
     /tmp/ccetrSNK.s:129    .text:00000054 .Loc.27
     /tmp/ccetrSNK.s:132    .text:00000058 .Loc.28
     /tmp/ccetrSNK.s:133    .text:00000058 .Loc.29
     /tmp/ccetrSNK.s:136    .text:0000005c .Loc.30
     /tmp/ccetrSNK.s:141    .text:00000060 .Loc.31
     /tmp/ccetrSNK.s:142    .text:00000060 .Loc.32
     /tmp/ccetrSNK.s:145    .text:00000064 .Loc.33
     /tmp/ccetrSNK.s:147    .text:00000068 L0
     /tmp/ccetrSNK.s:150    .text:0000006a .Loc.34
     /tmp/ccetrSNK.s:155    .text:00000070 .Loc.35
     /tmp/ccetrSNK.s:160    .text:00000074 .Loc.36
     /tmp/ccetrSNK.s:161    .text:00000074 .Loc.37
     /tmp/ccetrSNK.s:165    .text:00000078 .Loc.38
     /tmp/ccetrSNK.s:168    .text:0000007a .Loc.39
     /tmp/ccetrSNK.s:849    .data:00000000 _log_y
     /tmp/ccetrSNK.s:171    .text:00000082 .Loc.40
     /tmp/ccetrSNK.s:174    .text:00000086 .Loc.41
     /tmp/ccetrSNK.s:175    .text:00000086 .Loc.42
     /tmp/ccetrSNK.s:183    .text:00000094 .Loc.43
     /tmp/ccetrSNK.s:185    .text:00000094 .Loc.44
     /tmp/ccetrSNK.s:189    .text:0000009a .Loc.45
     /tmp/ccetrSNK.s:192    .text:0000009c .Loc.46
     /tmp/ccetrSNK.s:196    .text:0000009e .Loc.47
     /tmp/ccetrSNK.s:197    .text:0000009e .Loc.48
     /tmp/ccetrSNK.s:199    .text:0000009e .Loc.49
     /tmp/ccetrSNK.s:889    .progmem.data:0000003b _log_color
     /tmp/ccetrSNK.s:204    .text:000000a4 .Loc.50
     /tmp/ccetrSNK.s:205    .text:000000a4 .Loc.51
     /tmp/ccetrSNK.s:213    .text:000000a8 .Loc.52
     /tmp/ccetrSNK.s:214    .text:000000a8 .Loc.53
     /tmp/ccetrSNK.s:217    .text:000000a8 .Loc.54
     /tmp/ccetrSNK.s:218    .text:000000a8 .Loc.55
     /tmp/ccetrSNK.s:219    .text:000000a8 .Loc.56
     /tmp/ccetrSNK.s:233    .text:000000c6 .Loc.57
     /tmp/ccetrSNK.s:236    .text:000000c8 .Loc.58
     /tmp/ccetrSNK.s:237    .text:000000c8 .Loc.59
     /tmp/ccetrSNK.s:247    .text:000000de .Loc.60
     /tmp/ccetrSNK.s:258    .text:000000f4 .Loc.61
     /tmp/ccetrSNK.s:261    .text:000000f8 .Loc.62
     /tmp/ccetrSNK.s:263    .text:000000f8 .Loc.63
     /tmp/ccetrSNK.s:267    .text:000000fa .Loc.64
     /tmp/ccetrSNK.s:268    .text:000000fa .Loc.65
     /tmp/ccetrSNK.s:271    .text:000000fe .Loc.66
     /tmp/ccetrSNK.s:272    .text:000000fe .Loc.67
     /tmp/ccetrSNK.s:275    .text:00000102 .Loc.68
     /tmp/ccetrSNK.s:279    .text:00000106 .Loc.69
     /tmp/ccetrSNK.s:281    .text:00000106 .Loc.70
     /tmp/ccetrSNK.s:284    .text:00000108 .Loc.71
     /tmp/ccetrSNK.s:292    .text:00000114 .Loc.72
     /tmp/ccetrSNK.s:297    .text:0000011c .Loc.73
     /tmp/ccetrSNK.s:302    .text:00000120 .Loc.74
     /tmp/ccetrSNK.s:306    .text:00000122 .Loc.75
     /tmp/ccetrSNK.s:310    .text:00000128 .Loc.76
     /tmp/ccetrSNK.s:311    .text:00000128 .Loc.77
     /tmp/ccetrSNK.s:314    .text:0000012a .Loc.78
     /tmp/ccetrSNK.s:321    .text:00000130 .Loc.79
     /tmp/ccetrSNK.s:327    .text:00000136 .Loc.80
     /tmp/ccetrSNK.s:328    .text:00000136 .Loc.81
     /tmp/ccetrSNK.s:331    .text:0000013a .Loc.82
     /tmp/ccetrSNK.s:333    .text:0000013a .Loc.83
     /tmp/ccetrSNK.s:334    .text:0000013a .Loc.84
     /tmp/ccetrSNK.s:339    .text:00000146 .Loc.85
     /tmp/ccetrSNK.s:344    .text:0000014a .Loc.86
     /tmp/ccetrSNK.s:350    .text:00000150 .Loc.87
     /tmp/ccetrSNK.s:351    .text:00000150 .Loc.88
     /tmp/ccetrSNK.s:360    .text:00000160 .Loc.89
     /tmp/ccetrSNK.s:364    .text:00000164 .Loc.90
     /tmp/ccetrSNK.s:368    .text:00000166 L0
     /tmp/ccetrSNK.s:373    .text:00000166 log_boot_P
     /tmp/ccetrSNK.s:376    .text:00000166 .Loc.91
     /tmp/ccetrSNK.s:377    .text:00000166 L0
     /tmp/ccetrSNK.s:378    .text:00000166 .Loc.92
     /tmp/ccetrSNK.s:400    .text:0000017c .Loc.93
     /tmp/ccetrSNK.s:401    .text:0000017c .Loc.94
     /tmp/ccetrSNK.s:402    .text:0000017c .Loc.95
     /tmp/ccetrSNK.s:404    .text:0000017c .Loc.96
     /tmp/ccetrSNK.s:409    .text:00000182 .Loc.97
     /tmp/ccetrSNK.s:422    .text:0000019a .Loc.98
     /tmp/ccetrSNK.s:423    .text:0000019a .Loc.99
     /tmp/ccetrSNK.s:434    .text:000001ae .Loc.100
     /tmp/ccetrSNK.s:439    .text:000001b4 .Loc.101
     /tmp/ccetrSNK.s:450    .text:000001c8 L0
     /tmp/ccetrSNK.s:455    .text:000001c8 panic
     /tmp/ccetrSNK.s:458    .text:000001c8 .Loc.102
     /tmp/ccetrSNK.s:459    .text:000001c8 L0
     /tmp/ccetrSNK.s:460    .text:000001c8 .Loc.103
     /tmp/ccetrSNK.s:486    .text:000001e4 .Loc.104
     /tmp/ccetrSNK.s:491    .text:000001ea .Loc.105
     /tmp/ccetrSNK.s:493    .text:000001ec .Loc.106
     /tmp/ccetrSNK.s:494    .text:000001ec .Loc.107
     /tmp/ccetrSNK.s:495    .text:000001ec .Loc.108
     /tmp/ccetrSNK.s:497    .text:000001ec .Loc.109
     /tmp/ccetrSNK.s:504    .text:000001f8 .Loc.110
     /tmp/ccetrSNK.s:505    .text:000001f8 .Loc.111
     /tmp/ccetrSNK.s:512    .text:00000204 .Loc.112
     /tmp/ccetrSNK.s:516    .text:0000020a .Loc.113
     /tmp/ccetrSNK.s:518    .text:0000020a .Loc.114
     /tmp/ccetrSNK.s:519    .text:0000020a .Loc.115
     /tmp/ccetrSNK.s:521    .text:0000020a .Loc.116
     /tmp/ccetrSNK.s:844    .progmem.data:00000000 __c.0
     /tmp/ccetrSNK.s:528    .text:00000216 .Loc.117
     /tmp/ccetrSNK.s:535    .text:00000222 .Loc.118
     /tmp/ccetrSNK.s:542    .text:00000224 .Loc.119
     /tmp/ccetrSNK.s:543    .text:00000224 .Loc.120
     /tmp/ccetrSNK.s:544    .text:00000224 .Loc.121
     /tmp/ccetrSNK.s:546    .text:00000226 L0
     /tmp/ccetrSNK.s:559    .text:00000226 memory_dump
     /tmp/ccetrSNK.s:562    .text:00000226 .Loc.122
     /tmp/ccetrSNK.s:563    .text:00000226 L0
     /tmp/ccetrSNK.s:564    .text:00000226 .Loc.123
     /tmp/ccetrSNK.s:636    .text:00000260 .Loc.124
     /tmp/ccetrSNK.s:637    .text:00000260 .Loc.125
     /tmp/ccetrSNK.s:638    .text:00000260 .Loc.126
     /tmp/ccetrSNK.s:639    .text:00000260 .Loc.127
     /tmp/ccetrSNK.s:640    .text:00000260 .Loc.128
     /tmp/ccetrSNK.s:642    .text:00000260 .Loc.129
     /tmp/ccetrSNK.s:643    .text:00000260 .Loc.130
     /tmp/ccetrSNK.s:645    .text:00000262 .Loc.131
     /tmp/ccetrSNK.s:648    .text:00000266 .Loc.132
     /tmp/ccetrSNK.s:655    .text:0000026e .Loc.133
     /tmp/ccetrSNK.s:659    .text:00000274 .Loc.134
     /tmp/ccetrSNK.s:664    .text:0000027a .Loc.135
     /tmp/ccetrSNK.s:678    .text:00000292 .Loc.136
     /tmp/ccetrSNK.s:682    .text:00000296 .Loc.137
     /tmp/ccetrSNK.s:692    .text:000002a6 .Loc.138
     /tmp/ccetrSNK.s:698    .text:000002ac .Loc.139
     /tmp/ccetrSNK.s:718    .text:000002d2 .Loc.140
     /tmp/ccetrSNK.s:723    .text:000002da .Loc.141
     /tmp/ccetrSNK.s:724    .text:000002da .Loc.142
     /tmp/ccetrSNK.s:725    .text:000002da .Loc.143
     /tmp/ccetrSNK.s:732    .text:000002e6 .Loc.144
     /tmp/ccetrSNK.s:736    .text:000002e8 .Loc.145
     /tmp/ccetrSNK.s:737    .text:000002e8 .Loc.146
     /tmp/ccetrSNK.s:741    .text:000002ee .Loc.147
     /tmp/ccetrSNK.s:757    .text:0000030c .Loc.148
     /tmp/ccetrSNK.s:762    .text:00000314 .Loc.149
     /tmp/ccetrSNK.s:765    .text:00000316 .Loc.150
     /tmp/ccetrSNK.s:774    .text:00000326 .Loc.151
     /tmp/ccetrSNK.s:779    .text:0000032e .Loc.152
     /tmp/ccetrSNK.s:780    .text:0000032e .Loc.153
     /tmp/ccetrSNK.s:781    .text:0000032e .Loc.154
     /tmp/ccetrSNK.s:783    .text:00000330 .Loc.155
     /tmp/ccetrSNK.s:787    .text:00000332 .Loc.156
     /tmp/ccetrSNK.s:788    .text:00000332 .Loc.157
     /tmp/ccetrSNK.s:793    .text:00000338 .Loc.158
     /tmp/ccetrSNK.s:794    .text:00000338 .Loc.159
     /tmp/ccetrSNK.s:799    .text:00000340 .Loc.160
     /tmp/ccetrSNK.s:806    .text:00000348 .Loc.161
     /tmp/ccetrSNK.s:810    .text:0000034e .Loc.162
     /tmp/ccetrSNK.s:813    .text:00000350 .Loc.163
     /tmp/ccetrSNK.s:817    .text:00000356 .Loc.164
     /tmp/ccetrSNK.s:821    .text:0000035c .Loc.165
     /tmp/ccetrSNK.s:822    .text:0000035c .Loc.166
     /tmp/ccetrSNK.s:827    .text:00000362 .Loc.167
     /tmp/ccetrSNK.s:834    .text:0000036c .Loc.168
     /tmp/ccetrSNK.s:838    .text:00000372 L0
     /tmp/ccetrSNK.s:884    .progmem.data:00000036 _init
     /tmp/ccetrSNK.s:879    .progmem.data:00000030 _debug
     /tmp/ccetrSNK.s:874    .progmem.data:0000002b _warn
     /tmp/ccetrSNK.s:869    .progmem.data:00000025 _error
     /tmp/ccetrSNK.s:864    .progmem.data:0000001f _panic
     /tmp/ccetrSNK.s:906    .text:00000372 L0
                     .debug_frame:00000000 L0
     /tmp/ccetrSNK.s:278    .text:00000106 .L3
     /tmp/ccetrSNK.s:266    .text:000000fa .L4
     /tmp/ccetrSNK.s:182    .text:00000094 .L6
     /tmp/ccetrSNK.s:194    .text:0000009e .L7
     /tmp/ccetrSNK.s:326    .text:00000136 .L15
     /tmp/ccetrSNK.s:128    .text:00000054 .L5
     /tmp/ccetrSNK.s:140    .text:00000060 .L22
     /tmp/ccetrSNK.s:300    .text:00000120 .L16
     /tmp/ccetrSNK.s:319    .text:00000130 .L17
     /tmp/ccetrSNK.s:305    .text:00000122 .L11
     /tmp/ccetrSNK.s:154    .text:00000070 .L9
     /tmp/ccetrSNK.s:349    .text:00000150 .L13
     /tmp/ccetrSNK.s:158    .text:00000074 .L12
     /tmp/ccetrSNK.s:343    .text:0000014a .L14
     /tmp/ccetrSNK.s:541    .text:00000224 .L25
     /tmp/ccetrSNK.s:697    .text:000002ac .L31
     /tmp/ccetrSNK.s:735    .text:000002e8 .L28
     /tmp/ccetrSNK.s:805    .text:00000348 .L29
     /tmp/ccetrSNK.s:786    .text:00000332 .L30
     /tmp/ccetrSNK.s:654    .text:0000026e .L27
     /tmp/ccetrSNK.s:2118   .debug_abbrev:00000000 .Ldebug_abbrev0
     /tmp/ccetrSNK.s:8      .text:00000000 .Ltext0
     /tmp/ccetrSNK.s:896    .text:00000372 .Letext0
     /tmp/ccetrSNK.s:3497   .debug_line:00000000 .Ldebug_line0
     /tmp/ccetrSNK.s:561    .text:00000226 .LFB7
     /tmp/ccetrSNK.s:839    .text:00000372 .LFE7
     /tmp/ccetrSNK.s:2742   .debug_loclists:00000012 .LLST18
     /tmp/ccetrSNK.s:2735   .debug_loclists:0000000c .LVUS18
     /tmp/ccetrSNK.s:2797   .debug_loclists:0000004d .LLST19
     /tmp/ccetrSNK.s:2792   .debug_loclists:00000049 .LVUS19
     /tmp/ccetrSNK.s:2826   .debug_loclists:0000006c .LLST20
     /tmp/ccetrSNK.s:2817   .debug_loclists:00000064 .LVUS20
     /tmp/ccetrSNK.s:2875   .debug_loclists:000000a3 .LLST21
     /tmp/ccetrSNK.s:2866   .debug_loclists:0000009b .LVUS21
     /tmp/ccetrSNK.s:2902   .debug_loclists:000000c4 .LLST22
     /tmp/ccetrSNK.s:2899   .debug_loclists:000000c2 .LVUS22
     /tmp/ccetrSNK.s:2921   .debug_loclists:000000d7 .LLST23
     /tmp/ccetrSNK.s:2914   .debug_loclists:000000d1 .LVUS23
     /tmp/ccetrSNK.s:2952   .debug_loclists:000000fa .LLST24
     /tmp/ccetrSNK.s:2949   .debug_loclists:000000f8 .LVUS24
     /tmp/ccetrSNK.s:662    .text:0000027a .LVL57
     /tmp/ccetrSNK.s:717    .text:000002d2 .LVL62
     /tmp/ccetrSNK.s:722    .text:000002da .LVL63
     /tmp/ccetrSNK.s:756    .text:0000030c .LVL65
     /tmp/ccetrSNK.s:761    .text:00000314 .LVL66
     /tmp/ccetrSNK.s:778    .text:0000032e .LVL68
     /tmp/ccetrSNK.s:798    .text:00000340 .LVL71
     /tmp/ccetrSNK.s:809    .text:0000034e .LVL73
     /tmp/ccetrSNK.s:820    .text:0000035c .LVL75
     /tmp/ccetrSNK.s:457    .text:000001c8 .LFB6
     /tmp/ccetrSNK.s:547    .text:00000226 .LFE6
     /tmp/ccetrSNK.s:2964   .debug_loclists:00000106 .LLST16
     /tmp/ccetrSNK.s:2959   .debug_loclists:00000102 .LVUS16
     /tmp/ccetrSNK.s:2981   .debug_loclists:00000119 .LLST17
     /tmp/ccetrSNK.s:2978   .debug_loclists:00000117 .LVUS17
     /tmp/ccetrSNK.s:517    .text:0000020a .LBB18
     /tmp/ccetrSNK.s:520    .text:0000020a .LBE18
     /tmp/ccetrSNK.s:503    .text:000001f8 .LVL49
     /tmp/ccetrSNK.s:511    .text:00000204 .LVL50
     /tmp/ccetrSNK.s:515    .text:0000020a .LVL51
     /tmp/ccetrSNK.s:527    .text:00000216 .LVL52
     /tmp/ccetrSNK.s:534    .text:00000222 .LVL53
     /tmp/ccetrSNK.s:375    .text:00000166 .LFB5
     /tmp/ccetrSNK.s:451    .text:000001c8 .LFE5
     /tmp/ccetrSNK.s:2996   .debug_loclists:00000128 .LLST15
     /tmp/ccetrSNK.s:2993   .debug_loclists:00000126 .LVUS15
     /tmp/ccetrSNK.s:421    .text:0000019a .LVL42
     /tmp/ccetrSNK.s:433    .text:000001ae .LVL43
     /tmp/ccetrSNK.s:437    .text:000001b4 .LVL44
     /tmp/ccetrSNK.s:14     .text:00000000 .LFB4
     /tmp/ccetrSNK.s:369    .text:00000166 .LFE4
     /tmp/ccetrSNK.s:3021   .debug_loclists:00000141 .LLST0
     /tmp/ccetrSNK.s:3008   .debug_loclists:00000135 .LVUS0
     /tmp/ccetrSNK.s:3073   .debug_loclists:0000017c .LLST1
     /tmp/ccetrSNK.s:3062   .debug_loclists:00000172 .LVUS1
     /tmp/ccetrSNK.s:3479   .debug_rnglists:0000000c .LLRL2
     /tmp/ccetrSNK.s:3134   .debug_loclists:000001be .LLST3
     /tmp/ccetrSNK.s:3123   .debug_loclists:000001b4 .LVUS3
     /tmp/ccetrSNK.s:3190   .debug_loclists:000001fc .LLST4
     /tmp/ccetrSNK.s:3173   .debug_loclists:000001ec .LVUS4
     /tmp/ccetrSNK.s:3269   .debug_loclists:00000258 .LLST5
     /tmp/ccetrSNK.s:3264   .debug_loclists:00000254 .LVUS5
     /tmp/ccetrSNK.s:72     .text:00000026 .LBB10
     /tmp/ccetrSNK.s:94     .text:00000038 .LBE10
     /tmp/ccetrSNK.s:3294   .debug_loclists:00000271 .LLST6
     /tmp/ccetrSNK.s:3291   .debug_loclists:0000026f .LVUS6
     /tmp/ccetrSNK.s:3311   .debug_loclists:00000280 .LLST7
     /tmp/ccetrSNK.s:3306   .debug_loclists:0000027c .LVUS7
     /tmp/ccetrSNK.s:195    .text:0000009e .LBB14
     /tmp/ccetrSNK.s:262    .text:000000f8 .LBE14
     /tmp/ccetrSNK.s:3336   .debug_loclists:00000299 .LLST12
     /tmp/ccetrSNK.s:3333   .debug_loclists:00000297 .LVUS12
     /tmp/ccetrSNK.s:198    .text:0000009e .LBB15
     /tmp/ccetrSNK.s:216    .text:000000a8 .LBE15
     /tmp/ccetrSNK.s:3351   .debug_loclists:000002a8 .LLST13
     /tmp/ccetrSNK.s:3348   .debug_loclists:000002a6 .LVUS13
     /tmp/ccetrSNK.s:3366   .debug_loclists:000002b7 .LLST14
     /tmp/ccetrSNK.s:3363   .debug_loclists:000002b5 .LVUS14
     /tmp/ccetrSNK.s:230    .text:000000c2 .LVL20
     /tmp/ccetrSNK.s:246    .text:000000de .LVL22
     /tmp/ccetrSNK.s:260    .text:000000f8 .LVL24
     /tmp/ccetrSNK.s:3487   .debug_rnglists:00000016 .LLRL9
     /tmp/ccetrSNK.s:3387   .debug_loclists:000002cc .LLST10
     /tmp/ccetrSNK.s:3378   .debug_loclists:000002c4 .LVUS10
     /tmp/ccetrSNK.s:3431   .debug_loclists:000002f9 .LLST11
     /tmp/ccetrSNK.s:3426   .debug_loclists:000002f5 .LVUS11
     /tmp/ccetrSNK.s:359    .text:00000160 .LVL37
     /tmp/ccetrSNK.s:111    .text:0000004a .LBI11
     /tmp/ccetrSNK.s:110    .text:0000004a .LBB11
     /tmp/ccetrSNK.s:122    .text:00000050 .LBE11
     /tmp/ccetrSNK.s:3446   .debug_loclists:00000309 .LLST8
     /tmp/ccetrSNK.s:3443   .debug_loclists:00000307 .LVUS8
     /tmp/ccetrSNK.s:119    .text:00000050 .LVL7
     /tmp/ccetrSNK.s:100    .text:0000003e .LVL4
     /tmp/ccetrSNK.s:104    .text:00000044 .LVL5
     /tmp/ccetrSNK.s:108    .text:0000004a .LVL6
     /tmp/ccetrSNK.s:135    .text:0000005c .LVL9
     /tmp/ccetrSNK.s:144    .text:00000064 .LVL11
     /tmp/ccetrSNK.s:188    .text:0000009a .LVL16
     /tmp/ccetrSNK.s:274    .text:00000102 .LVL26
     /tmp/ccetrSNK.s:309    .text:00000128 .LVL30
     /tmp/ccetrSNK.s:299    .text:00000120 .LVL28
     /tmp/ccetrSNK.s:907    .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
serial_tx
serial_tx_str_P
__strlen_P
lcd_initialized
lcd_char
lcd_string_P
serial_tx_str
vsnprintf_P
strcpy_P
snprintf
isprint
__do_copy_data
